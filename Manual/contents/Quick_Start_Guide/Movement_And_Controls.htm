<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>動きと制御</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Some basic code and GML Visualto show people how to move things around within a game." />
  <meta name="rh-index-keywords" content="Quick Start - Movement And Controls" />
  <meta name="search-keywords" content="movement,controls" />
  <meta name="robots" content="NOODP" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>動きと制御</h1>
  <p>このクイックスタートガイドの<a href="Drawing.htm">前のセクションでは</a>、画面に物を描く例をいくつか示しましたが、物を描くだけでなく、 それを動かすことができなければあまり意味がありません。そこでこのセクションでは、あなたの<span class="notranslate">objects</span> のための動きの例と、さまざまなタイプのゲームのための基本的なコントロールスキームをいくつか示します。すべての例は、<span class="notranslate">GML</span> Visual と<span class="notranslate">GML</span> Code を使っているので、使いやすいほうを使ってください。できるだけ早く作り始めてほしいので、ここではあまり深く説明しないことに注意してください。</p>
  <p><span class="notranslate">GML</span> これ以上先に進む前に、<a href="../Introduction/The_Start_Page.htm">スタート</a>ページから新しいプロジェクト (<span class="notranslate">GML</span> または<span class="notranslate">sprites</span> Visual) を作成し、いくつかの<span class="notranslate">object</span> と<span class="notranslate">room</span> を追加 (または作成) しておくとよいでしょう。作成する<span class="notranslate">sprites</span> がどのようなものかはあまり気にしないでください。単純な白い四角形でも構いません。</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="#">マウスに向かって移動する</a></p>
  <div class="droptext" data-targetname="drop_down">
    <p class="dropspot"><span class="notranslate">object</span> を動かしてプレーヤーと対話させる最も簡単な方法の1つは、マウスを使うことです。この例では、いくつかの基本的なコードを使って、ユーザーがマウスの左ボタンをクリックしたところに向かって<span class="notranslate">object</span> を移動させる方法を紹介します<img> 。</p>
    <p class="dropspot">まず、<span class="notranslate">object</span> を開き、<span class="notranslate">sprite</span> を割り当て、<strong>Global Left Mouse Down イベントを</strong>付与します。</p>
    <p class="dropspot"><img alt="LMB Icon" class="icon" src="../assets/Images/Icons/Icon_LMB.png" /></p>
    <p class="dropspot"><strong>グローバルマウスイベントを </strong>使用するのは、<span class="notranslate">room</span> のどこでもクリックを検出できるからです。一方、通常のマウスイベントは、インスタンスの<a class="glossterm" data-glossterm="バウンディングボックス" href="#">バウンディングボックス</a>内で実際にマウスがクリックされた場合のみ、クリックを検出します。このイベントには、以下のアクションやコードを追加したいと思います。</p>
    <p class="dropspot"><img alt="Adding The Mouse Left Button Down Event" class="center" src="../assets/Images/QS_Guide/QS_Add_GlobalLMBDownEvent.png" /></p>
    <p class="code">move_towards_point(mouse_x, mouse_y, 2);</p>
    <p class="dropspot">ここでは、インスタンスに画面上の位置、この場合は &quot;<span class="inline">mouse_x</span>&quot; と &quot;<span class="inline">mouse_y</span>&quot; の位置に向かって移動するよう指示しています (&quot;<span class="inline">mouse_x</span>&quot; と &quot;<span class="inline">mouse_y</span>&quot; は常に現在のマウスカーソル位置を保持する<strong>組み込み </strong><span class="glossextra">変数</span>です)。<span class="notranslate">GML</span> Visual は、&quot;<span class="inline">direction</span>&quot; と &quot; <span class="inline">speed</span>&quot; を設定することでこれを行います。 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/Instance_Variables/Instance_Variables.htm"><strong>インスタンス変数</strong></a>一方、<span class="notranslate">GML</span> は、関数 <a href="../GameMaker_Language/GML_Reference/Movement_And_Collisions/Movement/move_towards_point.htm"><span class="inline">move_towards_point()</span></a>(これは <span class="inline">speed </span>と <span class="inline">direction </span>変数も設定します。ただ、単一の使いやすい関数です)。</p>
    <p class="dropspot">この<span class="notranslate">object</span> のインスタンスを<span class="notranslate">room</span> に配置し、再生ボタン<img> を押し、<img> の周りをクリック<span class="notranslate">room</span> して、インスタンスをマウスの方に移動させることができます。</p>
    <p class="dropspot"><img>素晴らしい<span class="notranslate">object</span> のインスタンスがクリックした方向へ移動し、ボタンを押し続けると、インスタンスはマウスカーソルを追い続けます。しかし、問題があります...一度クリックしてから離すと、インスタンスは動き続け、最終的には<span class="notranslate">room</span> から離れてしまいます!この問題を解決する方法はいくつかあり、どれを選ぶかはやりたいことによりますが、今のところ最も簡単な解決策は、単純に<strong>Global Mouse Button Released</strong>イベントを追加することなので、それを<span class="notranslate">object</span> に追加して、次のコードを与えます。</p>
    <p class="dropspot"><img alt="GML VisualTo Move Instance Towards Mouse" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_1_1.png" /></p>
    <p class="code">speed = 0;</p>
    <p class="dropspot">これを使うと、インスタンスはマウスボタンを押している間だけマウスカーソルに追従し、ボタンを離すと動かなくなります。Play<img> を押して、今すぐテストしてください。</p>
    <p class="dropspot">この例を離れる前に、解決しなければならない最後の問題があります...マウスボタンをクリックした<em>まま </em>カーソルを移動させない場合、インスタンスはカーソルに向かって移動し、その後カーソルの周りで &quot;振動&quot; しています。これは、インスタンスが一度に 1 ピクセルより速く移動しているため、位置を「オーバーシュート」して、戻ろうとし、またオーバーシュートするなどしています（すぐにわからない場合は、移動速度を 5 などにして問題を確認します）。</p>
    <p class="dropspot"><img>これを解決するためには、次のコードで<span class="notranslate">object</span> に<strong>Step Event</strong>を追加する必要があります。</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="code">var _dist = point_distance(x, y, mouse_x, mouse_y);<br />
      <br />
      if _dist &lt;= speed<br />
      {<br />
          speed = 0;<br />
      }
    </p>
    <p class="dropspot">インスタンスからマウスの位置までの距離をチェックし、それが現在のスピードと同じか小さい場合は、スピードを0に設定します。これにより、インスタンスはマウスの位置に十分近づいた時点で停止し、「振動」のような不快な問題は発生しなくなります。</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="#">キーボードによる4ウェイ・8ウェイ動作</a></p>
  <div class="droptext" data-targetname="drop_down1">
    <p class="dropspot"><a href="What_Is_Programming_.htm">このガイドの</a>冒頭で、ゲームステップごとにインスタンスを2ピクセルずつ右に移動させる次のアクションとコードを示しました。</p>
    <p class="dropspot"><img alt="LMB Icon" class="icon" src="../assets/Images/Icons/Icon_LMB.png" /></p>
    <p class="code">x = x + 2;</p>
    <p class="dropspot">このような動きは<strong>位置決め </strong>移動と呼ばれ、コードを実行するたびにインスタンスを拾い上げては新しい位置に配置することになります。この例では、このタイプの動きを使って、インスタンスを上下左右の4方向に移動させる方法を紹介します。</p>
    <p class="dropspot">まず、<span class="notranslate">object</span> を開き、<span class="notranslate">sprite</span> を割り当てます。ここで、さまざまな<strong>キーボードイベントを</strong>追加し、それぞれでインスタンスを希望の方向に移動させることができますが、プレイヤーは一度に1つの方向にしか移動できないので、キーボードイベントだけでこれを行うのは、コードを使用して行うより少し複雑です。代わりに、<strong>ステップイベント</strong>（<span class="notranslate">object</span> に追加してください）を使い、以下のアクションやコードを使って、矢印キーで移動するようにします。</p>
    <p class="dropspot"><img alt="Animation Of Instance Moving Towards Mouse" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_1_1.gif" /></p>
    <p class="code">if keyboard_check(vk_left)<br />
      {<br />
          x = x - 2;<br />
      }<br />
      else if keyboard_check(vk_right)<br />
      {<br />
          x = x + 2;<br />
      }<br />
      else if keyboard_check(vk_up)<br />
      {<br />
          y = y - 2;<br />
      }<br />
      else if keyboard_check(vk_down)<br />
      {<br />
          y = y + 2;<br />
      }</p>
    <p class="dropspot">インスタンスが一度に1方向にしか移動しないことを保証するために &quot; <span class="inline">if... else if... else if...</span>&quot; 構造体を使用しています。したがって、インスタンスは上下左右にしか移動できないはずですが、斜めには移動できません。<span class="notranslate">object</span> のインスタンスを<span class="notranslate">room</span> に配置し、<strong>再生 </strong>ボタン<img> を押して、今すぐテストしてください!すべてが正しく行われた場合、次のようなものができているはずです。</p>
    <p class="dropspot"><img alt="GML VisualTo Set The Instance Speed" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_1_2.png" /></p>
    <p class="dropspot">このコードも、4方向移動から8方向移動に簡単に変更できます。コードブロックから「 <span class="inline">else</span> 」コマンドを削除するだけで、以下のように表示されます。</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="code">if keyboard_check(vk_left)<br />
      {<br />
          x = x - 2;<br />
      }<br />
      if keyboard_check(vk_right)<br />
      {<br />
          x = x + 2;<br />
      }<br />
      if keyboard_check(vk_up)<br />
      {<br />
          y = y - 2;<br />
      }<br />
      if keyboard_check(vk_down)<br />
      {<br />
          y = y + 2;<br />
      }</p>
    <p class="dropspot">これで、<strong>再生 </strong>ボタン（<img> ）を押すと、このように表示されます。</p>
    <p class="dropspot"><img alt="Animation Showing Instance Vibrating" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_1_2.gif" /></p>
    <p class="dropspot">最後に、<span class="notranslate">GML</span> でコーディングしているユーザーにとって、注意すべき点が1つあります ...<span class="notranslate">GML</span> Visual を使用する場合、使用したいキーボードキーをドロップダウンリストから選択できますが、<span class="notranslate">GML</span> の場合は、それほど簡単ではありません。上のコードにある矢印キーの定数のように、使用できる<a href="../GameMaker_Language/GML_Reference/Game_Input/Keyboard_Input/Keyboard_Input.htm">キーボード定数が</a>いくつかありますが、英数字キー用の定数は<em>ありません </em>。これらのキーは少し違った扱いをされ、関数 <a href="../GameMaker_Language/GML_Reference/Strings/ord.htm"><span class="inline">ord()</span></a>.以下のコードは、矢印キーの代わりにWASDを使用した場合の動作例です。</p>
    <p class="code">if keyboard_check(ord(&quot;A&quot;))<br />
      {<br />
          x = x - 2;<br />
      }<br />
      if keyboard_check(ord(&quot;D&quot;))<br />
      {<br />
          x = x + 2;<br />
      }<br />
      if keyboard_check(ord(&quot;W&quot;))<br />
      {<br />
          y = y - 2;<br />
      }<br />
      if keyboard_check(ord(&quot;S&quot;))<br />
      {<br />
          y = y + 2;<br />
      }</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="#">ゲームパッドの動き</a></p>
  <div class="droptext" data-targetname="drop_down2">
    <p class="dropspot">マウスの動きとキーボードの動きについて説明しましたが、次は<strong>ゲームパッドの </strong>動きについて説明します。dパッドはキーボードと同じように動作します（上記の例ではキーボードの機能を <a href="../GameMaker_Language/GML_Reference/Game_Input/GamePad_Input/gamepad_button_check.htm"><span class="inline">gamepad_button_check()</span></a>この例では、アナログスティックを使った操作を説明します。</p>
    <p class="dropspot">まず始めに、使用されているゲームパッドを検出する必要があります。ゲームパッドには0から11までのID値が与えられているので、&quot; <span class="inline">for</span>&quot;<span class="notranslate">loop</span> を使って接続されているゲームパッドのIDを検出し、このID値を今後のために変数に保存しておきます。ゲームパッドは最初に接続されたものだけを検出し、すべてのゲームパッドを検出するわけではないので、ゲームパッドを検出した後に &quot; <span class="inline">break</span>&quot; コマンドを使用し、<span class="notranslate">loop</span> を「解除」します（例えば、最初に接続したゲームパッドが ID 4 の場合、<span class="notranslate">loop</span> は ID 値 0 ～ 4 をチェックしながら 5 回だけ実行し、ゲームパッドに出会うと<span class="notranslate">loop</span> を解除することになります）。そこで、<span class="notranslate">object</span> を作り（または開き）、<span class="notranslate">sprite</span> を割り当て、以下のように<strong>Create Event</strong>を追加します。</p>
    <p class="dropspot"><img alt="GML VisualActions For The Step Event" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_1_3.png" /></p>
    <p class="code">gamepad_id = -1;<br />
      <br />
      for (var i = 0; i &lt; 12; i += 1;)<br />
      {<br />
          if gamepad_is_connected(i)<br />
          {<br />
              gamepad_id = i;<br />
              gamepad_set_axis_deadzone(gamepad_id, 0.2);<br />
      <br />
              break;<br />
          }<br />
      }
    </p>
    <p class="dropspot">上記のコードでは、ゲームパッドに <strong> <a class="glossterm" data-glossterm="行止り" href="#">デッドゾーン</a> </strong>を設定していることに注意してください。これは、ゲームパッドのアナログスティックの感度がメーカーごとに異なるためで、デッドゾーンを設定しないと、ゲーム中に不要な動きをする可能性があります。そこで、デッドゾーンを0.2などの値に設定し、その<a class="glossterm" data-glossterm="絶対" href="#">絶対</a>値以下のゲームパッドのスティックの値は無視するように<span data-keyref="GameMaker Name">GameMakerに</span>指示します。</p>
    <p class="dropspot">実際の動きを加えるには、<strong>ステップ</strong>イベントが必要なので、今それを追加して、次の<span class="notranslate">GML</span> VisualまたはGMLを与えます。</p>
    <p class="dropspot"><img alt="GML VisualExample" class="center" src="../assets/Images/QS_Guide/QS_DnD_Example.png" /></p>
    <p class="code">if gamepad_id &gt; -1<br />
      {<br />
          var _h = gamepad_axis_value(gamepad_id, gp_axislh);<br />
          var _v = gamepad_axis_value(gamepad_id, gp_axislv);<br />
          x += _h * 4;<br />
          y += _v * 4;<br />
      }</p>
    <p class="dropspot">ここでは、<em>左 </em>スティックが水平または垂直に動くかどうかをチェックしています。軸関数は-1〜1の値を返すので、横軸は-1が左、0が動いていない、1が右となり、縦軸は-1が上、0が動いていない、1が下となります。また、値は<em>- </em>1から1の間なので、例えば横軸は0.5という値を返すことがあり、これはスティックが「静止」位置と完全に右に押された位置の中間の位置にあることを意味します。このため、この値に 4 を掛けます。（インスタンスを移動させる速度に応じて、任意の値を掛けることができます）これは、スティック軸の移動量に応じてインスタンスの速度が変化することを意味します。</p>
    <p class="dropspot"><span class="notranslate">object</span> のインスタンスを<span class="notranslate">room</span> に配置し、<strong>再生 </strong>ボタンを押します。 <strong> <img></strong>を押し、接続したゲームパッドの左スティックで移動してください。このように表示されるはずです。</p>
    <p class="dropspot"><img alt="GML VisualStep Event Movement Actions" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_2_1.png" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down3" href="#">進化した8ウェイムーブメント</a></p>
  <div class="droptext" data-targetname="drop_down3">
    <p class="dropspot">この最後の例では、8 方向の移動コードを再検討して、その問題点を解決します。それは、斜めの移動は、上下左右の移動よりも実際に速いということです。これは、斜めに移動する場合、x/y の移動値で作成された直角三角形の斜辺に沿って移動することになるからです。</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="dropspot">何が起こっているのかを明確にするために、テキストと<span class="notranslate">sprites</span> をすべて削除し、同じ動きのラインを45°回転させて水平にしたものを表示するだけにしてみましょう。</p>
    <p class="dropspot"><img alt="Animation Showing 4-Way Keyboard Movement" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_2_1.gif" /></p>
    <p class="dropspot">ご覧の通り、その差は歴然としており、1ステップあたり1〜2ピクセル以上動くと、斜め移動の方が<em>はるかに </em>速いことが一目瞭然になります。では、どのようにこれを制限すればよいのでしょうか。この方法にはいくつかありますが、ここではそのうちのひとつに絞って説明します。この方法は、後々ゲームに役立つ関数や概念をいくつか導入しているからです。</p>
    <p class="dropspot">これに対応するためには、独立して押されたキーの入力値を<span class="glossextra">変数に</span>格納し、それをチェックして押されたキーの組み合わせに応じて移動する必要がありそうです。そのためには、<span class="notranslate">object</span> を割り当てた<span class="notranslate">sprite</span> を用意し、それに以下のようなアクションやコードで<strong>Step Event</strong>を与える必要があります。</p>
    <p class="dropspot"><img alt="GML VisualStep Event Movement Actions" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_2_2.png" /></p>
    <p class="note"><span class="note">注</span>：上記のビジュアルアクションは、視覚的にわかりやすいように2列に分けていますが、ビジュアルエディタでは連続的に配置されます。</p>
    <p class="code">var _left = keyboard_check(vk_left);<br />
      var _right = keyboard_check(vk_right);<br />
      var _up = keyboard_check(vk_up);<br />
      var _down = keyboard_check(vk_down);<br />
      var _hspd = _right - _left;<br />
      var _vspd = _down - _up;</p>
    <p class="dropspot">実際に動くためには、もう少しコードを追加する必要がありますが、その前に少し説明します。左、右、上、下を水平、垂直方向の速度に変換したいので、それぞれのキーの値を取得し、それに対して基本的な計算を行い、速度値を得ています。これは、キーが押されていれば、チェックアクションや関数が「1」を返し、押されていなければ、関数が「0」を返すからです。つまり、例えば右が押されていれば、&quot; <span class="inline">_hspd</span>&quot;は「1 - 0 = 1」、左が押されていれば、&quot; <span class="inline">_hspd</span>&quot;は「0 - 1 = -1」となります（両方押されていれば、「1 - 1 = 0」となり、インスタンスは動きません）。<span data-keyref="GameMaker Name">GameMaker の</span> <span class="notranslate">room</span> では、右に移動するには <span class="inline">x </span>の位置を足し、左に移動するには引きます。このコードでは、キーボード入力に応じて水平または垂直に移動するために、正または負の値を加算または減算することができることを覚えておいてください。</p>
    <p class="dropspot"><strong>ステップイベント</strong>内で、上記のコードの後に、次のコードを追加します。</p>
    <p class="dropspot"><img alt="Play Icon" class="icon" src="../assets/Images/Icons/Icon_PlayGame.png" /></p>
    <p class="code">if (_hspd != 0 || _vspd != 0)<br />
      {<br />
          var _spd = 4;<br />
          var _dir = point_direction(0, 0, _hspd, _vspd);<br />
          var _xadd = lengthdir_x(_spd, _dir);<br />
          var _yadd = lengthdir_y(_spd, _dir);<br />
          x = x + _xadd;<br />
          y = y + _yadd;<br />
      }</p>
    <p class="dropspot">上記のコードでは、まず2つの<span class="glossextra">式の</span>どちらかが真であるかどうかをチェックします。つまり、水平方向または垂直方向の速度変数が0でない場合です。 <span class="inline">if</span>&quot;<span class="notranslate">GML</span> のチェックで、&quot; <span class="inline">||</span>&quot; という記号を使っていることに注目してください。これはプログラミングでは「 <span class="inline">or</span> 」を意味するので、平たく言えば</p>
    <p class="code">if the variable _hspd does not equal zero<br />
      <strong>or</strong><br />
      if the variable _vspd does not equal zero
    </p>
    <p class="dropspot"><span class="notranslate">string</span> このように複数の式をまとめて&quot; <span class="inline">if</span>&quot;チェックすることができ、それらの式は複数の異なる方法で評価することができます（詳しくは<a href="../GameMaker_Language/GML_Overview/Expressions_And_Operators.htm">こちらの</a>「<strong>式</strong>」の項をご覧ください）。</p>
    <p class="dropspot">次のコードでは、実際の移動速度の値を変数に格納し、 <span class="inline">_hspd </span>と <span class="inline">_vspd </span>の値（-1、0、1）を使用して方向を取得します。<span class="notranslate">room</span> の座標を使用していないので、方向関数は (0, 0) からチェックします。その代わりに、変数の値に基づいて 0° から 360° までの方向として評価されるようにしたいのです。次の図は、言葉で説明するよりも、何が起こっているかをよく表しています。</p>
    <p class="dropspot"><img alt="Animation Showing 8-Way Keyboard Movement" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_2_2.gif" /></p>
    <p class="note"><span class="note">注</span> <span data-keyref="GameMaker Name">GameMakerの</span>方向は<strong>反時計回りに</strong>計算されるので、0°と360°は右、90°は上、180°は右、270°は下となります。</p>
    <p class="dropspot">最後に <a href="../GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/lengthdir_x.htm"><span class="inline">lengthdir_x()</span></a>と <a href="../GameMaker_Language/GML_Reference/Maths_And_Numbers/Angles_And_Distance/lengthdir_y.htm"><span class="inline">lengthdir_y()</span></a>関数を使って実際に変数を動かしています。これらは <strong> <a class="glossterm" data-glossterm="ベクトル" href="#">ベクトル</a>  </strong>関数で、長さ（距離）と方向を受け取り、これらの値に基づいて与えられた軸上の新しい位置を計算します（より詳細な説明は関数の説明を参照してください）。</p>
    <p class="dropspot">一度にたくさんのことを理解するのは大変ですが、すべてを理解できなくても心配しないでください。そのうちに理解できるようになります!あとは、この<span class="notranslate">object</span> のインスタンスを<span class="notranslate">room</span> に追加して、<strong>再生 </strong>ボタンを押すだけです。 <strong> <img></strong>そうすれば、斜め方向への移動に関連する問題なしに、絹のように滑らかな8方向への移動が可能になるはずです。</p>
    <p class="dropspot"><img alt="Getting Gamepad ID Using DnD" class="center" src="../assets/Images/QS_Guide/QS_MovementExample_DnD_3_1.png" /></p>
  </div>
  <p> </p>
  <p>これらの例と、前回の描画の例で、あなた自身のプロジェクトを作り始めるのに十分な理解が得られたと思いま す。このクイックスタートガイドの最後のページには、学習したことのまとめと、その他の学習教材へのリンクが掲載されています。</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">戻る：<a href="../Content.htm">インデックス</a></div>
        <div style="float:right">次へ<a href="Summary.htm">概要</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Movement
Controls
Movement and Controls
Movement Examples
Controls Examples
-->
  <!-- TAGS
qs_movement_controls
-->
</body>
</html>