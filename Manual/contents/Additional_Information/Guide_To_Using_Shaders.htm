<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>シェーダー使用ガイド</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how to set up and use shaders" />
  <meta name="rh-index-keywords" content="Guide To Using Shaders" />
  <meta name="search-keywords" content="shaders,shader,use shaders,shader guide,shader setup,shader examples,shader example" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>シェーダー使用ガイド</h1>
  <p>シェーダーは、ゲームの美しいグラフィック効果を作り出すためによく使われます。また、<span data-keyref="GameMaker Name">GameMakerの</span>中でも高度な機能であるため、プログラミングや<span data-keyref="GameMaker Name">GameMakerの</span>動作に関する基本的な理解があることが前提です。</p>
  <p><span class="notranslate">shader</span> <span class="notranslate">Shader</span> コードは通常のコードと似ていますが、（ほとんど常に）CPU ではなく GPU で実行されます。この違いは独自の規則と制限を伴いますが、それについては後ほど取り上げます。</p>
  <p>各<span class="notranslate">shader</span> は、<strong>頂点<span class="notranslate">shader</span> </strong>と<strong>フラグメント<span class="notranslate">shader</span> </strong> （<strong>ピクセルシェーダとも</strong>呼ばれる）の 2 つ の別々のコンポーネントから構成されています。<span class="notranslate">vertex</span> <span class="notranslate">shader</span> から始めましょう。各<span class="notranslate">sprite</span> は長方形で形成されていますが、コンピュータは三角形を描くのが好きなので、その長方形は 2 つの三角形に分割されます（<em>4 角形と</em>呼ばれることもあります）。このため、1つの<span class="notranslate">sprite</span> につき6つの頂点（角）が残りますが、そのうちの2つは同じものなので、4つだけ気にすればよいのです。さて、for<span class="notranslate">loop</span> があって、<span class="notranslate">vertex</span> のすべてに渡って、<span class="notranslate">vertex</span> <span class="notranslate">shader</span> の中のコードをそれぞれ実行するとします。これにより、<span class="notranslate">vertex</span> <span class="notranslate">shader</span> が先に実行されるため、フラグメント<span class="notranslate">vertex</span> に渡す前に<span class="notranslate">shader</span> の位置と色を変更することができます。</p>
  <p>その様子はこんな感じです。</p>
  <p><img>フラグメント<span class="notranslate">shader</span> では、前と同じ<span class="notranslate">loop</span> を想像してください。しかし、今回は<span class="notranslate">sprite</span> のすべてのピクセルを調べ、そのピクセルの位置や色などの情報を提供します。フラグメント<span class="notranslate">shader</span> のコードでは、そのピクセルの色を決定するための操作と計算を行い、望む効果を得ることができます。例えば、<span class="notranslate">shader</span> を白黒にするために<span class="notranslate">sprite</span> を使用する場合、その効果を得るために各ピクセルをどのような灰色にする必要があるかを計算することになります。</p>
  <p>こんな感じでしょうか。</p>
  <p><img> <span class="notranslate">shader</span> コードが通常 GPU で実行されるのは、GPU の方が効率的だからです。最近の CPU は通常、2～8 個のコアを備えています。各コアは一度に1つのタスクを実行できるので、複数のコアを活用することで、それだけ多くのタスクを同時に実行することができるのです。一方、最新のGPUは、何千、何万というタスクを同時に実行することができます。これは、 、何千ものピクセルの コードを同時に実行できるため、役に立ちます。ただし、 の初期状態にしかアクセスできないため、他のピクセルに対して行われた変更については、コードがまだ実行されていないことを確実に知ることができない、という制約があります。<span class="notranslate">shaders</span> <span class="notranslate">shader</span> <span class="notranslate">sprite</span></p>
  <p class="note"><strong>注</strong>:<span data-keyref="GameMaker Name">GameMakerでは</span>、<strong>GLSL</strong>(OpenGL<span class="notranslate">shaders</span> Language)、<strong>HLSL</strong>(High-level<span class="notranslate">Shader</span> Language、DirectXで動作するときに使用)、<strong>GLSL ES</strong>(モバイルデバイスで一般的なGLSLのサブセット)で<span class="notranslate">Shader</span> を記述することができます。ここでは、<span class="notranslate">shader</span> 言語として<strong>GLSL ES</strong>を使用します。これは、ターゲット プラットフォーム間で最高の互換性を提供するものだからです。非常に特殊なニーズがあり、他の<span class="notranslate">shader</span> 言語の制限を理解している場合を除き、一般的には常にこれを使用することになります。しかし、数学と技術は3つの言語間で似ているはずですが、あちこちで構文が異なることがあります。</p>
  <p><span class="notranslate">vertex</span> <span class="notranslate">shader</span> が最初に実行され、上で説明したように、<strong>頂点を</strong>扱います。これは位置、法線、<span class="notranslate">texture</span> の座標を計算するために使用されます。これらの<span class="notranslate">shaders</span> は、通常すべての<span class="notranslate">sprite</span> が正方形なので、2D では特に役に立ちませんが、多少の傾きや拡大縮小などを行うために使用することができます。3Dでは、照明の計算やメッシュの変形に、より有用になります。フラグメント<span class="notranslate">shaders</span> はもっと面白く、ここで主に取り上げます。フラグメント<span class="notranslate">shader</span> は<span class="notranslate">textures</span> に関する情報を得る場所であり、画像の各ピクセルの最終的な色を調整することができるからです。</p>
  <p> </p>
  <h2>シェーダー変数</h2>
  <p><span data-keyref="GameMaker Name">GameMaker</span> で<span class="notranslate">shader</span> を作成したことがある人は、デフォルトの<strong>パススルー</strong> <span class="notranslate">shader</span> に以下のキーワードがあることに気がついたかもしれません。これらのキーワードは、<span class="notranslate">shader</span> 、各変数の目的と範囲を理解するのに役立ちます。</p>
  <ul class="colour">
    <li><strong>属性</strong>です。OpenGL が<strong>バーテックスシェーダに </strong>渡す変数です。これらは<span class="notranslate">vertex</span> ごとに変更可能で、読み取り専用です。これには、<span class="notranslate">vertex</span> 位置、<span class="notranslate">texture</span> 座標、<span class="notranslate">vertex</span> 色、<span class="notranslate">vertex</span> 法線などの情報が含まれます。</li>
    <li><strong>変化する</strong>。これらは、<strong>頂点 </strong>シェーダと<strong>フラグメントシェーダ </strong>間でデータを渡すために使用される変数です。これらは<span class="notranslate">vertex</span> <span class="notranslate">shader</span> で書き込みが可能ですが、フラグメント<span class="notranslate">shader</span> では読み取り専用です。</li>
    <li><strong>ユニフォーム</strong>です。これらは<span class="notranslate">object</span> ごとに変化する変数で、ユーザーから<span class="notranslate">shader</span> に渡されます。これらは<span class="notranslate">vertex</span> とフラグメント<span class="notranslate">shaders</span> の両方で使うことができますが、読み取り専用です。</li>
  </ul>
  <p>また、キーワードとして<strong>vecが</strong>使用されているのを見ることができます。これは<span class="notranslate">shader</span> でベクトル変数を識別するために使用されます。ベクトルは<span class="notranslate">shaders</span> を扱うときに非常に重要であることがすぐにわかるでしょう。そのため、GLSL ではベクトルは基本型として実装されています。もしあなたがそれについてよく知らないのであれば、それらは1列だけの行列として表される数学用語です。プログラミングでは、通常、構成要素の数が次元に対応する配列として表現されます。2 次元および 3 次元のベクトルは、位置や<span class="notranslate">texture</span> の座標、アルファチャンネルを持たない色によく使われ、4 次元のベクトルはアルファチャンネルを持つ色に使われます。また、ブール値、整数値、浮動小数点値のいずれを保持するかを指定することもできる。ベクトルを宣言する構文は次のとおりです。</p>
  <p class="code">vec2 firstVec;  // Two-dimensional vector of floats<br />
    vec3 secondVec; // Three-dimensional vector of floats<br />
    vec4 thirdVec;  // Four-dimensional vector of floats<br />
    <br />
    bvec3 boolVec;  // Three-dimensional vector of booleans<br />
    ivec4 intVec;   // Four-dimensional vector of integers
  </p>
  <p>それらを初期化するために、コンストラクタを使ってベクトルを作成します。ベクトルの長さと同じ数の値を用意する必要がありますが、スカラーと小さいベクトルを混ぜて、目標の長さにすることができます。以下はその例です。</p>
  <p class="code">// Simple 2D vector with 2 scalar values<br />
    vec2 firstVec  = vec2(2.0, 1.0);<br />
    // A 4D vector using 2 scalars and a vec2 create the 4 values<br />
    vec4 secondVec = vec4(1.0, firstVec, 0.0);<br />
    // A 3D vector using 1 component of a vec4 plus a vec2 to create the 3 values<br />
    vec3 thirdVec  = vec3(secondVec.x, firstVec);</p>
  <p>また、同じ長さの別のベクトルを割り当てることもできます（あるいは、適切な長さになるまでベクトルを<em>スウィズル </em>することもできますが、それについては後ほど説明します）。</p>
  <p class="code">vec3 firstVec;<br />
    vec3 secondVec = firstVec;<br />
    vec4 thirdVec  = secondVec.xyz;<br />
    vec2 fourthVec = thirdVec.zx;</p>
  <p>GLSLでベクトル成分にアクセスする場合、いくつかのオプションがあります。最も基本的なものは、ベクトルを配列として扱い、次のように角括弧を使って構成要素にアクセスするものです。</p>
  <p class="code">vec4 myVec;<br />
    myVec[0] = 0.0;<br />
    myVec[1] = 1.0;<br />
    myVec[2] = 2.0;<br />
    myVec[3] = 1.0;</p>
  <p>しかし、次のような構文でコンポーネントにアクセスする方法もあります。</p>
  <p class="code">vec4 myVec;<br />
    myVec.x = 1.0;<br />
    myVec.y = 2.0;</p>
  <p>これは、ベクトル内の成分名を使ってアクセスするものです。x, y, z, w を使って、それぞれ第1成分、第2成分、第3成分、第4成分を得ることができます。以下の構文も有効なので、この方法を<strong>スウィズリングと </strong>呼んでいます。</p>
  <p class="code">vec4 firstVec;<br />
    vec3 secondVec = firstVec.xyz;<br />
    vec2 thirdVec  = secondVec.zy;<br />
    vec4 fourthVec = thirdVec.yxxy;</p>
  <p>このように、最大4文字までの任意の組み合わせで、その長さのベクトルを作成することができます。範囲外の成分にアクセスしようとすることはできません（例えば、 <span class="inline">secondVec</span> や <span class="inline">thirdVec</span> の w にアクセスしようとすると、4番目の成分を持たないため）。また、代入されるベクトル変数が使用する文字の数と同じ大きさであれば、文字を繰り返し、どのような順番でも使用することができます。</p>
  <p>当然のことながら、スウィズルを使ってコンポーネントの値を設定する場合、同じコンポーネントを2回使用することはできません。例えば、以下の例は、同じコンポーネントに2つの異なる値を設定しようとしているので、有効ではありません。</p>
  <p class="code">myVec.xx = vec2(2.0, 3.0);</p>
  <p>最後に、私たちは <span class="inline">xyzw</span> をスウィズル マスクとして使用しています。これは、通常、位置を扱う場合に使用します。 <span class="inline">rgba</span> (色に使用)、または <span class="inline">stpq</span> (<span class="notranslate">texture</span> の座標に使用)です。内部的には、これらのマスクに違いはなく、ベクターがそのインスタンスで何を表しているかをコードで明確にするためにのみ使用します。また、スウィズル・マスクを同じ操作で組み合わせることはできないので、これは無効です。</p>
  <p class="code"><span class="inline"></span>myVec = otherVec.ybp;</p>
  <p>これらは多くの定義と情報でしたが、これらのことを知ることは、<span class="notranslate">shaders</span> 自体を理解するために必要なことです。</p>
  <p> </p>
  <h2>シェーダーの作成</h2>
  <p><span data-keyref="GameMaker Name">GameMaker</span> で<span class="notranslate">shader</span> を作成すると、<span class="notranslate">vertex</span> <span class="notranslate">shader</span> (<span class="inline">.vsh</span>) とフラグメント<span class="notranslate">shader</span> (<span class="inline">.fsh</span>) の2つのファイルが開かれます。これは最も基本的な<span class="notranslate">shader</span> で、<span class="notranslate">sprite</span> を受け取り、<span class="notranslate">texture</span> を読み込んで、各ピクセルにその色で着色するものです。描画時に<span class="notranslate">vertex</span> の色を指定すると、その色が<span class="notranslate">texture</span> に混ざります。</p>
  <p>新しく作成した<span class="notranslate">shader</span> <span class="notranslate">asset</span> のコードから解析してみましょう。まず、<span class="notranslate">vertex</span> <span class="notranslate">shader</span> 。</p>
  <p class="code">// Passthrough Vertex Shader<br />
    attribute vec3 in_Position;                  // (x,y,z)<br />
    //attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.<br />
    attribute vec4 in_Colour;                    // (r,g,b,a)<br />
    attribute vec2 in_TextureCoord;              // (u,v)<br />
    <br />
    varying vec2 v_vTexcoord;<br />
    varying vec4 v_vColour;<br />
    <br />
    void main()<br />
    {<br />
        vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);<br />
        gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;<br />
        <br />
        v_vColour = in_Colour;<br />
        v_vTexcoord = in_TextureCoord;<br />
    }
  </p>
  <p>main関数の外では、いくつかの変数の宣言とその修飾子を見ることができます。属性は<span class="notranslate">GameMaker</span> から提供されたものです。変化するものは、ユーザーが作成したもので、その情報をフラグメントに渡します<span class="notranslate">shader</span> 。メイン関数の内部では、頂点のスクリーン位置を求める計算が行われています。</p>
  <ul class="colour">
    <li>まず、 <span class="inline">vec4</span> を作成し、位置の成分で初期化し、4番目の成分として1を加える。線形代数では、ベクトルが点を表す場合は第4成分に1を加え、実際のベクトルを表す場合は0を加えるのが慣例となっている。</li>
    <li>次に、この第4成分を加えて、4x4の行列である <span class="inline">MATRIX_WORLD_VIEW_PROJECTION</span> の行列と乗算する必要があります。この乗算によって、<span class="notranslate">vertex</span> の世界位置がスクリーン座標に投影されます。</li>
    <li>最後に、<span class="notranslate">vertex</span> の色と<span class="notranslate">texture</span> の座標を、変化する変数を通して、フラグメント<span class="notranslate">shader</span> に渡します。</li>
  </ul>
  <p>この<span class="notranslate">shader</span> は、<span class="notranslate">vertex</span> の位置で遊ぶ予定がなければ、そのままにしておくべきです。また、以下に示すどの例でも、このフラグメントは使用されません。なぜなら、示すすべての効果は、フラグメント<span class="notranslate">shader</span> を使用して作成されるからです。</p>
  <p>それでは、フラグメント<span class="notranslate">shader</span> を簡単に見てみましょう。</p>
  <p class="code">// Passthrough Fragment Shader<br />
    varying vec2 v_vTexcoord;<br />
    varying vec4 v_vColour;<br />
    <br />
    void main()<br />
    {<br />
        gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );<br />
    }
  </p>
  <p>前に説明したように、フラグメント<span class="notranslate">shader</span> の考え方は、現在のピクセルの色を返すことです。これは、変数 <span class="inline">gl_FragColor</span> に最終的な色の値を代入することによって行われます。 <span class="inline">texture2D</span> 関数は<span class="notranslate">texture</span> と <span class="inline">vec2</span> に調べたい UV 座標を<span class="notranslate">texture</span> で受け取り、その色を <span class="inline">vec4</span> として返します。<span class="notranslate">shader</span> を通して、私たちがやっていることは、このピクセルの座標の<span class="notranslate">texture</span> の色をつかみ、このピクセルに関連する<span class="notranslate">vertex</span> の色と掛け合わせるだけです。</p>
  <p>最初の<span class="notranslate">shader</span> ができたので、あとはそれをテストするために<span class="notranslate">object</span> を作成して<span class="notranslate">sprite</span> を割り当て、<span class="notranslate">object</span> の<strong>Draw Event</strong>で<span class="notranslate">shader</span> をこのように設定するだけです。</p>
  <p class="code">// Draw Event<br />
    shader_set(shdrColorOverlay);<br />
    draw_self();<br />
    shader_reset();</p>
  <p>の間で行うすべてのドローコールは <a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_set.htm"><span class="inline">shader_set()</span></a>と <a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_reset.htm"><span class="inline">shader_reset()</span></a>の間で行うすべての描画呼び出しには、<span class="notranslate">shader</span> が適用されます。ここでは、パススルーシェーダで<span class="notranslate">object</span> <span class="notranslate">sprite</span> を描画しています。</p>
  <p><img>ご想像のとおり、これは単純なパススルーなので、視覚的には何も変わりません。<span class="notranslate">shader</span> 。しかし、以下のセクションでは、これを変更し、<span class="notranslate">sprite</span> の描画方法を変更するための簡単な手順の概要を説明します。各セクションでは、プロジェクトで作成し使用することができる異なる<span class="notranslate">shader</span> を示し、作成に必要な手順と、なぜこのような方法をとっているのかを説明しています。</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">カラーオーバーレイシェーダー</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">今度は、ベースとなる<span class="notranslate">shader</span> を編集して、何か違うことをすることができます。<span class="notranslate">vertex</span> <span class="notranslate">shader</span> の部分には触れず、フラグメント<span class="notranslate">shader</span> のみを編集します。まず最初に、<span class="notranslate">shader</span> が<span class="notranslate">sprite</span> を赤色で描画するという、非常に単純な操作を行います。これは、 <span class="inline">gl_FragColor</span> を単に赤に変更することで行います。</p>
    <p class="code">// Color Overlay Fragment Shader<br />
      void main()<br />
      {<br />
          gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);<br />
      }</p>
    <p class="dropspot">これによって、次のような結果が得られる。</p>
    <p class="dropspot"><img>私たちが期待していたのとはちょっと違いますね。覚えておくべきことは、すべての<span class="notranslate">sprite</span> は最終的には長方形であり、透明度を考慮しない限り（考慮していませんが）、このような結果になる、ということです。</p>
    <p class="note"><strong>注</strong>：上の画像で、長方形のサイズが変わっているのは、ベースとなる<span class="notranslate">sprite</span> が<span class="notranslate">texture</span> によって<span class="notranslate">GameMaker</span> ページに配置されたときに、その周囲の「空の」スペースが自動的に切り取られたためで、アニメーションフレームごとに、それを構成する三角形はフレームの切り取ったサイズに合わせて異なるサイズになっているのです。このオプションを無効にすると、単に動かない赤い四角形が画面に表示されるだけです。</p>
    <p class="dropspot">上記で、 <span class="inline">texture2D</span> 関数について触れましたが、これを使って、作業中のピクセルの色を取得し、そこから透明度を取得することにします。<span class="inline">texture2D</span> の戻り値は <span class="inline">vec4</span> で、構成要素は順に赤、緑、青、アルファです。アルファチャンネルにアクセスするには、変数名の後にピリオドを付けてから <span class="inline">a</span> または <span class="inline">w</span> を指定します。これはそれぞれRGBAとXYZWに対応する。</p>
    <p class="dropspot">以下は、更新されたコードです。</p>
    <p class="code">// Color Overlay Fragment Shader<br />
      varying vec2 v_vTexcoord;<br />
      <br />
      void main()<br />
      {<br />
          vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);<br />
          gl_FragColor = vec4(1.0, 0.0, 0.0, texColor.a);<br />
      }
    </p>
    <p class="dropspot">ここで、新しい <span class="inline">vec4</span> を <span class="inline">gl_FragColor</span> に割り当てます。赤チャンネルは最大、緑と青のチャンネルはゼロ、アルファチャンネルは元の<span class="notranslate">texture</span> と同じにします。出力はこのようになります。</p>
    <p class="dropspot"><img>これこそ、私たちが求めていたものですすべてのピクセルの色を赤に置き換えましたが、アルファチャンネルはそのままにしてあります。</p>
    <p class="dropspot">異なる色を使いたいときに毎回<span class="notranslate">shader</span> を変更しなければならないのは良いアイデアではありません。特に、使いたい色ごとに別々の<span class="notranslate">shader</span> を用意する必要があるからです。その代わりに、<strong>ユニフォームを使って</strong> <span class="notranslate">shader</span> に色情報を渡します。これを行うには、まずユニフォームへの<strong>ポインタを </strong>取得する必要があります。これは、<span class="notranslate">object</span> を持つ<span class="notranslate">sprite</span> の<strong>Create Event</strong>で、追加することによって行います。</p>
    <p class="code">// Create Event<br />
      _uniColor = shader_get_uniform(shdrColorOverlay, &quot;u_colour&quot;);<br />
      _color    = [1.0, 1.0, 0.0, 1.0];</p>
    <p class="dropspot">私たちがしなければならないのは <a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/shader_get_uniform.htm"><span class="inline">shader_get_uniform()</span></a>を呼び出して、ユニフォームへのポインタを取得するだけです。渡す必要のあるパラメータは、<span class="notranslate">shader</span> <span class="notranslate">asset</span> の名前（<span class="notranslate">GameMaker</span> が生成してくれるIDを渡したいので引用符なし）と、<span class="notranslate">shader</span> の中の制服変数の名前（今回は<span class="notranslate">string</span> ）です。この名前は<span class="notranslate">shader</span> のコード内の名前と正確に一致しないとうまく行きません。また、<span class="notranslate">runtime</span> で変更し、その変更を記憶させることができるように、color 変数を追加しています。</p>
    <p class="dropspot">さて、drawイベントのコードは、uniform変数を渡すために少し変更します。</p>
    <p class="code">// Draw Event<br />
      shader_set(shdrColorOverlay);<br />
      shader_set_uniform_f_array(_uniColor, _color);<br />
      draw_self();<br />
      shader_reset();</p>
    <p class="dropspot">これは前と同じコードですが、何かを描く前に、すべての均一な値を<span class="notranslate">shader</span> に渡す必要があります。この場合、色を float の配列として渡しています。<span class="notranslate">shader</span> に関しては、ユニフォームを含めて使うように変更するので、次のようになります。</p>
    <p class="code">// Color Overlay Fragment Shader<br />
      varying vec2 v_vTexcoord;<br />
      uniform vec4 u_color;<br />
      void main()<br />
      {<br />
          vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);<br />
          gl_FragColor = vec4(u_color.rgb, texColor.a);<br />
      }</p>
    <p class="dropspot">create<span class="notranslate">shader</span> (<span class="inline">u_color</span>) と同じ名前の変数を宣言し、スウィズリングを利用して <span class="inline">gl_FragColor</span> ベクトルの最初の3つの成分として渡しているのです。もう一度コンパイルすると、こうなるはずです。</p>
    <p class="dropspot"><img>これで、<span class="notranslate">shader</span> はより便利で再利用しやすくなりました。もし、<span class="notranslate">runtime</span> の間に色を設定する（変数 <span class="inline">_color</span> を使用する）必要があれば、さらに機能を追加するのはあなた次第です。</p>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">ブラック＆ホワイトシェーダー</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">白黒の<span class="notranslate">shader</span> を作ることは、<span class="notranslate">shaders</span> の仕組みについて学ぶのに最適な方法です。概念的には非常に単純なので、多くの初心者はまずこの方法を試してみます。しかし、それは単純なのでしょうか？そうではありません。</p>
    <p class="dropspot">RGBカラーを使用する場合、3つの成分がすべて同じ値であれば、グレートーンが得られます。<span class="notranslate">shader</span> この考え方を利用した素朴な作り方としては、3つのカラーチャンネル（赤、緑、青）をすべて足して、3で割るという方法があります。その後、その値を3つのチャンネルすべてに割り当てて、グレートーンを作成します。そのフラグメント<span class="notranslate">shader</span> は、こんな感じです。</p>
    <p class="code">// Black and white fragment shader<br />
      varying vec2 v_vTexcoord;<br />
      varying vec4 v_vColour;<br />
      <br />
      void main()<br />
      {<br />
          vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);<br />
          float gray = (texColor.r + texColor.g + texColor.b) / 3.0;<br />
          gl_FragColor = v_vColour * vec4(gray, gray, gray, texColor.a);<br />
      }
    </p>
    <p class="dropspot">ひとつ気づいたかもしれませんが、 <span class="inline">gl_FragColor</span> のコードでは、<span class="inline">vec4</span> に <span class="inline">v_vColour</span> というものを掛けています。これは<span class="notranslate">vertex</span> <span class="notranslate">shader</span> から渡される変数で、このピクセルに関連する<span class="notranslate">vertex</span> の色を教えてくれるものです。最終的に計算された色に<span class="notranslate">vertex</span> の色を乗じるのは常に良いアイデアです。ほとんどの場合、これは何もしませんが、<span class="notranslate">vertex</span> の色を<span class="notranslate">GML</span> で変更した場合、これはそれを反映します (以下のような関数を使用します)。 <a href="../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_ext.htm"><span class="inline">draw_sprite_ext()</span></a>または <a href="../GameMaker_Language/GML_Reference/Drawing/Sprites_And_Tiles/draw_sprite_general.htm"><span class="inline">draw_sprite_general()</span></a>を変更するための関数 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/image_blend.htm"><span class="inline">image_blend</span></a>).</p>
    <p class="dropspot">ドローイベントに関しては、渡すユニフォームがないので、非常にシンプルです。</p>
    <p class="code">// Draw Event<br />
      shader_set(shdrBlackAndWhite);<br />
      draw_self();<br />
      shader_reset();</p>
    <p class="dropspot">コンパイルして見てみましょう。</p>
    <p class="dropspot"><img>これはもう素晴らしいことでしょう？というのも、成分を足して3で割るのではなく、各成分にNTSCの標準的な黒と白の値を掛けるのです。以下は、修正したフラグメント<span class="notranslate">shader</span> のコードです。</p>
    <p class="code">// Black and white fragment shader<br />
      varying vec2 v_vTexcoord;<br />
      <br />
      void main()<br />
      {<br />
          vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);<br />
          float gray = dot(texColor.rgb, vec3(0.299, 0.587, 0.114));<br />
          gl_FragColor = vec4(gray, gray, gray, texColor.a);<br />
      }
    </p>
    <p class="dropspot"> <span class="inline">texColor</span> の各構成要素に正しい重みを掛けてから足し合わせる略語として、ドットプロダクトを使用しています。ドットプロダクトに馴染みのない方は、本質的にこのようなことが起こっているのです。</p>
    <p class="code">float gray = (texColor.r * 0.299) + (texColor.g * 0.587) + (texColor.b * 0.114);</p>
    <p class="dropspot">結局、見た目はよく似ていますが、技術的にはこちらの方が正しいのです。</p>
    <p class="dropspot"><img alt="Shader Vertices" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Vertices.gif" /></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">レインボーシェーダー</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">最後の<span class="notranslate">shader</span> の例は楽しいもので、テキストやボタンなどに命を吹き込むために使うことができます。この<span class="notranslate">shader</span> は非常にカスタマイズしやすいので、シンプルなものから始めて、徐々に機能を追加していきます。もし、あなたが迷ったり、混乱したりしたら、上記のセクションを読み直してください。</p>
    <p class="dropspot">まず、ピクセルの水平位置によって、すべての色相でピクセルを着色したい。これを行うには、x 位置を色相に設定し、HSV（色相、彩度、明度）形式から RGB（赤、緑、青）形式へ変換します。このために、HSV 値を受け取って RGB ベクトルを返すヘルパー関数を fragment<span class="notranslate">shader</span> に記述する必要があります。 <span class="inline">if</span> <span class="notranslate">shader</span> コードで条件文を使用すると<span class="notranslate">shaders</span> が<em>非常に </em>遅くなるため、避ける必要があります。</p>
    <p class="dropspot">現段階での<span class="notranslate">shader</span> はこんな感じです。</p>
    <p class="code">// Fragment Shader<br />
      varying vec2 v_vTexcoord;<br />
      varying vec4 v_vColour;<br />
      <br />
      vec3 hsv2rgb(vec3 c) <br />
      {<br />
          vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);<br />
          vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);<br />
          return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);<br />
      }<br />
      <br />
      void main()<br />
      {<br />
          vec3 col = vec3(v_vTexcoord.x, 1.0, 1.0);<br />
          float alpha = texture2D(gm_BaseTexture, v_vTexcoord).a;<br />
          gl_FragColor = v_vColour * vec4(hsv2rgb(col), alpha);<br />
      }
    </p>
    <p class="dropspot">前の例より少し多くのことが行われていますが、その大部分はもう明らかでしょう。まず、 <span class="inline">hsv2rgb</span> 関数があります。これは HSV カラーを <span class="inline">vec3</span> で受け取り、RGB 変換を別の <span class="inline">vec3</span> で返します。メイン関数では、まず HSV カラーを作成します。色相は x 位置で、彩度と明度は今のところ 1.0 のままにしておきます。それから、<span class="notranslate">texture</span> からアルファを取得し、<span class="notranslate">sprite</span> の矩形全体ではなく、<span class="notranslate">sprite</span> のキャラクターだけに色を付けます (上記のカラーオーバーレイの例で行ったのと同じです)。最後に、フラグメントの色を、アルファを使用して RGB に変換した HSV カラーに、<span class="notranslate">vertex</span> のカラーを乗算したものに設定します (これは常に行うのがよい方法です)。</p>
    <p class="dropspot">ドローコードに関しては、今のところ些細なことです。</p>
    <p class="code">// Draw Event<br />
      shader_set(shdrRainbow);<br />
      draw_self();<br />
      shader_reset();</p>
    <p class="dropspot">では、その内容を確認してみましょう。</p>
    <p class="dropspot"><img>望んだものに近づいていますが、問題があります。アニメーションのすべてのフ レームで一度にすべての色が表示されず、色がランダムに変化しているように見え ます。その理由は、 <span class="inline">v_vTexcoord</span> が<span class="notranslate">sprite</span> の座標を、左上の角 (0,0) から始まって右下の角 (1,1) で終わるものとしていたからです。これは<span class="notranslate">shaders</span> の標準です。しかし、最適化のために<span class="notranslate">GameMaker</span> は<span class="notranslate">textures</span> を<a href="../Settings/Texture_Information/Texture_Pages.htm">テクスチャページと</a>呼ばれるものに入るだけ詰め込んでいます。そのため、<span class="notranslate">texture</span> は実際にはこのように見えることになります。</p>
    <p class="dropspot"><img>上で説明したように、 <span class="inline">v_vTexcoord</span> はこの<span class="notranslate">sprite</span> ページ全体における<span class="notranslate">texture</span> の絶対座標を与えてくれますが、欲しいのは現在の<span class="notranslate">sprite</span> のみをカバーする 0.0 から 1.0 までの値なのです。このプロセスは、<strong>正規化</strong>（値を取得して0から1の範囲に変換する）と呼ばれています。水平方向の値を正規化するには、上の図の x0 と x1 の値を知る必要があります。幸いなことに、<span class="notranslate">GameMaker</span> には、<span class="notranslate">sprite</span> のページ内にある<span class="notranslate">texture</span> の各コーナーの位置を教えてくれる関数があります。まず、Create Event に行って、このデータをシェーダに渡すためのユニフォームを作成する必要があります。</p>
    <p class="code">// Create Event<br />
      _uniUV = shader_get_uniform(shdrRainbow, &quot;u_uv&quot;);</p>
    <p class="dropspot">そして、drawイベントを修正して値を取得し、それをシェーダーに渡しています。</p>
    <p class="code">// Draw Event<br />
      shader_set(shdrRainbow);<br />
      var uv = sprite_get_uvs(sprite_index, image_index);<br />
      shader_set_uniform_f(_uniUV, uv[0], uv[2]);<br />
      draw_self();<br />
      shader_reset();</p>
    <p class="dropspot">この関数 <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_uvs.htm"><span class="inline">sprite_get_uvs()</span></a>は，<span class="notranslate">sprite</span> とインデックスを受け取り，各コーナーの座標，最適化するために何ピクセル切り取ったか，などといった膨大な情報を持つ配列を返します．ここでは、そのうちの2つの値に注目します。<span class="notranslate">sprite</span> の左と右の座標は、それぞれ <span class="inline">uv[0]</span> と <span class="inline">uv[2]</span> に格納されています。フラグメント<span class="notranslate">shader</span> では、これからこれらの値を使って、次のように正規化された水平位置を計算します。</p>
    <p class="code">// Fragment Shader<br />
      varying vec2 v_vTexcoord;<br />
      varying vec4 v_vColour;<br />
      <br />
      uniform vec2 u_uv;<br />
      <br />
      vec3 hsv2rgb(vec3 c) <br />
      {<br />
          vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);<br />
          vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);<br />
          return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);<br />
      }<br />
      <br />
      void main()<br />
      {<br />
          float pos = (v_vTexcoord.x - u_uv[0]) / (u_uv[1] - u_uv[0]);<br />
          vec3 col = vec3(pos, 1.0, 1.0);<br />
          float alpha = texture2D(gm_BaseTexture, v_vTexcoord).a;<br />
          gl_FragColor = v_vColour * vec4(hsv2rgb(col), alpha);<br />
      }
    </p>
    <p class="dropspot">ここでは、Create Eventで使用したのと同じ名前で、ファイルの先頭にuniform変数を追加しています。次に、現在の <span class="inline">x</span> の座標を原点に変換して正規化した水平位置を計算し ( <span class="inline">v_vTexcoord.x - u_uv[0]</span>)、それを<span class="notranslate">sprite</span> の幅で割って 0 から 1 までの範囲を作ります (<span class="inline">u_uv[1] - u_uv[0]</span>)。</p>
    <p class="dropspot">その結果、こうなりました。</p>
    <p class="dropspot"><img>これだ！これこそ、私たちが望んでいたものです。私たちは、<span class="notranslate">sprite</span> の中で、スペクトルのすべての色を見ることができます。</p>
    <p class="dropspot">これで満足かもしれませんが、この<span class="notranslate">shader</span> を使って、もっと楽しいことができるはずです。動きを作り出すために、時間に基づいた色のオフセットを追加したらどうでしょうか。これを行うには、<strong>速度と </strong> <strong>時間の</strong>ための2つの追加の変数が必要です。また、新しい変数それぞれに1つずつ、さらに2つのユニフォームが必要になるので、Create Eventは次のようになります。</p>
    <p class="code">// Create Event<br />
      _uniUV    = shader_get_uniform(shdrRainbow, &quot;u_uv&quot;);<br />
      _uniTime  = shader_get_uniform(shdrRainbow, &quot;u_time&quot;);<br />
      _uniSpeed = shader_get_uniform(shdrRainbow, &quot;u_speed&quot;);<br />
      _time  = 0;<br />
      _speed = 1.0;</p>
    <p class="dropspot">また、フレームごとに時間を増やす必要があるので、Step Eventの中で、以下のように追加します。</p>
    <p class="code">// Step Event<br />
      _time += 1 / room_speed;</p>
    <p class="dropspot">では、これらのユニフォームをシェーダーに送るために、draw イベントに移動しましょう。</p>
    <p class="code">// Draw Event<br />
      shader_set(shdrRainbow);<br />
      var uv = sprite_get_uvs(sprite_index, image_index);<br />
      shader_set_uniform_f(_uniUV, uv[0], uv[2]);<br />
      shader_set_uniform_f(_uniSpeed, _speed);<br />
      shader_set_uniform_f(_uniTime, _time);<br />
      draw_self();<br />
      shader_reset();</p>
    <p class="dropspot">最後に、これらの変数を実際に使うために、<span class="notranslate">shader</span> に戻りましょう。速度と時間を掛け合わせ、それを位置に加えるのです。</p>
    <p class="code">// Fragment Shader<br />
      varying vec2 v_vTexcoord;<br />
      varying vec4 v_vColour;<br />
      <br />
      uniform vec2 u_uv;<br />
      uniform float u_speed;<br />
      uniform float u_time;<br />
      <br />
      vec3 hsv2rgb(vec3 c) <br />
      {<br />
          vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);<br />
        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);<br />
          return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);<br />
      }<br />
      <br />
      void main()<br />
      {<br />
          float pos = (v_vTexcoord.x - u_uv[0]) / (u_uv[1] - u_uv[0]);<br />
          vec3 col = vec3((u_time * u_speed) + pos, 1.0, 1.0);<br />
          float alpha = texture2D(gm_BaseTexture, v_vTexcoord).a;<br />
          gl_FragColor = v_vColour * vec4(hsv2rgb(col), alpha);<br />
      }
    </p>
    <p class="dropspot">正しく動作していれば、このように表示されるはずです。</p>
    <p class="dropspot"><img>この<span class="notranslate">shader</span> を仕上げるために、さらにいくつかのユニフォームを追加して、さらにカスタマイズしていきます。最初の2つは、彩度と明るさをコントロールするものです。次のものは「section」と呼ぶことにします。その機能は、ユーザーがゼロから1の間の数値を渡すことで、一度に見るスペクトル全体の割合を決定することです。最後に、「mix」という変数を追加します。これは、<span class="notranslate">shader</span> の色と元の<span class="notranslate">texture</span> の色をどの程度混ぜたいかを指定します（1.0 はすべて虹色、0.0 はすべて<span class="notranslate">texture</span>)。いつものように、まず Create Event に変数を追加してみましょう。</p>
    <p class="code">// Create Event<br />
      _uniUV         = shader_get_uniform(shdrRainbow, &quot;u_uv&quot;);<br />
      _uniTime       = shader_get_uniform(shdrRainbow, &quot;u_time&quot;);<br />
      _uniSpeed      = shader_get_uniform(shdrRainbow, &quot;u_speed&quot;);<br />
      _uniSection    = shader_get_uniform(shdrRainbow, &quot;u_section&quot;);<br />
      _uniSaturation = shader_get_uniform(shdrRainbow, &quot;u_saturation&quot;); <br />
      _uniBrightness = shader_get_uniform(shdrRainbow, &quot;u_brightness&quot;);<br />
      _uniMix        = shader_get_uniform(shdrRainbow, &quot;u_mix&quot;);<br />
      <br />
      _time  = 0;<br />
      _speed = 1.0;<br />
      _section = 0.5;<br />
      _saturation = 0.7;<br />
      _brightness = 0.8;<br />
      _mix = 0.5;
    </p>
    <p class="dropspot">私たちの抽選会は、このようにユニフォームを含めて変更します。</p>
    <p class="code">// Draw Event<br />
      shader_set(shdrRainbow);<br />
      var uv = sprite_get_uvs(sprite_index, image_index);<br />
      shader_set_uniform_f(_uniUV, uv[0], uv[2]);<br />
      shader_set_uniform_f(_uniSpeed, _speed);<br />
      shader_set_uniform_f(_uniTime, _time);<br />
      shader_set_uniform_f(_uniSaturation, _saturation);<br />
      shader_set_uniform_f(_uniBrightness, _brightness);<br />
      shader_set_uniform_f(_uniSection, _section);<br />
      shader_set_uniform_f(_uniMix, _mix);<br />
      draw_self();<br />
      shader_reset();</p>
    <p class="dropspot"><span class="notranslate">shader</span> に関しては、彩度と明度を色に渡す必要があり、ヘルパー関数が生成する色に影響を与える。この部分は、範囲を小さくするために、位置を乗算する必要があります。また、<span class="notranslate">texture</span> の色全体を取得するので、<span class="notranslate">texture</span> の色を RGB 変換した色と混合して最終的な色を計算することができます。混合関数の最後のパラメータは、2番目の色をどれだけ追加するかを決定します。これが最終的な<span class="notranslate">shader</span> のコードです。</p>
    <p class="code">// Fragment Shader<br />
      varying vec2 v_vTexcoord;<br />
      varying vec4 v_vColour;<br />
      <br />
      uniform vec2 u_uv;<br />
      uniform float u_speed;<br />
      uniform float u_time;<br />
      uniform float u_saturation;<br />
      uniform float u_brightness;<br />
      uniform float u_section;<br />
      Uniform float u_mix;<br />
      <br />
      vec3 hsv2rgb(vec3 c) <br />
      {<br />
          vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);<br />
          vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);<br />
          return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);<br />
      }<br />
      <br />
      void main()<br />
      {<br />
          float pos = (v_vTexcoord.x - u_uv[0]) / (u_uv[1] - u_uv[0]);<br />
          vec4 texColor = texture2D(gm_BaseTexture, v_vTexcoord);<br />
          <br />
          vec3 col = vec3(u_section * ((u_time * u_speed) + pos), u_saturation, u_brightness);<br />
        vec4 finalCol = mix(texColor, vec4(hsv2rgb(col), texColor.a), u_mix);<br />
          <br />
          gl_FragColor = v_vColour * finalCol;<br />
      }
    </p>
    <p class="dropspot">そして、最終的に出来上がったのがこれです</p>
    <p class="dropspot"><img alt="Shader Fragments" class="center" src="../assets/Images/Scripting_Reference/Additional_Information/Shader_Fragments.gif" /></p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p>これで、この短いガイドは終わりです。これで、<span class="notranslate">shaders</span> がどのように機能するか、また、どのような用途に使用できるかをよりよく理解していただけたと思います。<span class="notranslate">shaders</span> <span class="notranslate">shader</span> このガイドに従って作成した<span class="notranslate">shader</span> で時間をかけて遊び、他のことを実験してみてください。-<span class="notranslate">shaders</span> は、あなたのゲームに視覚的な複雑さとスタイルを追加するための非常に強力なツールだからです。</p>
  <p class="note">このガイドの複製を許可してくれた<a href="https://twitter.com/AleHitti">Alejandro Hitti</a>氏と<strong>Amazonに</strong>感謝します。オリジナルは<a href="https://developer.amazon.com/es/blogs/appstore/post/acefafad-29ba-4f31-8dae-00805fda3f58/intro-to-shaders-and-surfaces-with-gamemaker-studio-2">Amazon Developer Blogに</a>掲載されています。</p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">戻る<a href="Additional_Information.htm">追加情報</a></div>
        <div style="float:right">次へ<a href="Guide_To_Primitives_And_Vertex_Building.htm">プリミティブと<span class="notranslate">Vertex</span> 構築の手引き</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Shaders
Using Shaders
Shader Guide
Guide To Using Shaders
-->
  <!-- TAGS
using_shaders
-->
</body>
</html>