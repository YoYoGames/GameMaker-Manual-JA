<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>物理ジョイントの作成</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for physics_joint_prismatic_create" />
  <meta name="rh-index-keywords" content="physics_joint_prismatic_create" />
  <meta name="search-keywords" content="physics_joint_prismatic_create" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>物理ジョイントの作成</h1>
  <p>レボリュートジョイントと同様に、プリズムジョイントも1つの自由度しかありませんが、このジョイントでは、回転ではなく軸に対する方向性であり、実際にはいかなる形の回転も防ぐことができます。この仕組みをイメージしやすくするために、以下の画像をご覧ください。</p>
  <p><img>2つのインスタンスをアンカーポイントで結合し、2つのw_axisのx/y座標を物理世界の（0,0）座標に相対させたベクトルで移動軸を定義します（したがって、x成分が0、y成分が1（0,1）ならジョイントは垂直プリズムジョイントとなります）。このジョイントは、バネやピストンのように、この<i>軸に対してのみ</i>動くことができるようになります。0 の位置は w_anchor x/y で定義した正確な場所なので、次の図のように負の値は軸に沿ってその点の「左」に、正の値は「右」に移動します（「左」「右」は相対的な言葉だということに注意してください！）。</p>
  <p><img>また、ジョイントにモーターがあるかないかを定義することができます。この方向はモーターの速度によって定義され、正の数は軸座標（&quot;right&quot;）に、負の数はアンカーポイント（&quot;left&quot;）に向かいます。max_motor_force&quot; 引数は、モーターの加速が止まらないように動作速度を制限するためのもので、衝突が動作に与える影響を制限するためのものです。このように、ジョイントモーターを使用して、ジョイントスピードをゼロに設定し、最大力を小さいが重要な値に設定することで、ジョイントの摩擦をシミュレートすることができます。モーターは関節が動くのを防ごうとしますが、大きな負荷がかかると降伏します。</p>
  <p>他のジョイントと同様に、「col」の値を <span class="inline">true</span> に設定すると、2つのインスタンスは相互に作用して衝突することができますが、衝突イベントがある<i>場合のみ</i>です。しかし、 <span class="inline">false</span> に設定すると、何があっても衝突することはありません。</p>
  <p> </p>
  <h4>構文です。</h4>
  <p class="code">physics_joint_prismatic_create(inst1, inst2, w_anchor_x, w_anchor_y, w_axis_x, w_axis_x, lower_trans_limit, upper_trans_limit, limit, max_motor_force, motor_speed, motor, col)</p>
  <table>
    <tbody>
      <tr>
        <th>論証</th>
        <th>タイプ</th>
        <th>商品説明</th>
      </tr>
      <tr>
        <td><span class="notranslate">inst1</span></td>
        <td><span data-keyref="Type_ID_Instance">インスタンスID</span></td>
        <td><span class="notranslate">The first instance to connect with the joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">inst2</span></td>
        <td><span data-keyref="Type_ID_Instance">インスタンスID</span></td>
        <td><span class="notranslate">The second instance to connect with the joint</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">w_anchor_x</span></td>
        <td><span data-keyref="Type_Real">リアル</span></td>
        <td><span class="notranslate">The x coordinate where the joint is anchored, within the game world</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">w_anchor_y</span></td>
        <td><span data-keyref="Type_Real">リアル</span></td>
        <td><span class="notranslate">The y coordinate where the joint is anchored, within the game world</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">w_axis_x</span></td>
        <td><span data-keyref="Type_Real">リアル</span></td>
        <td><span class="notranslate">The x component of the axis vector</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">w_axis_y</span></td>
        <td><span data-keyref="Type_Real">リアル</span></td>
        <td><span class="notranslate">The y component of the axis vector</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">lower_trans_limit</span></td>
        <td><span data-keyref="Type_Real">リアル</span></td>
        <td><span class="notranslate">The lower permitted limit for the joint movement</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">upper_trans_limit</span></td>
        <td><span data-keyref="Type_Real">リアル</span></td>
        <td><span class="notranslate">The lower permitted limit for the joint movement</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">limit</span></td>
        <td><span data-keyref="Type_Bool">ブーリアン</span></td>
        <td><span class="notranslate">Whether to limit the movement of the joint (true) or not (false)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">max_motor_force</span></td>
        <td><span data-keyref="Type_Real">リアル</span></td>
        <td><span class="notranslate">Sets the maximum movement speed for the motor</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">motor_speed</span></td>
        <td><span data-keyref="Type_Real">リアル</span></td>
        <td><span class="notranslate">This is the speed at which the motor should move</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">motor</span></td>
        <td><span data-keyref="Type_Bool">ブーリアン</span></td>
        <td><span class="notranslate">Whether the motor should be active (true) or not (false)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">col</span></td>
        <td><span data-keyref="Type_Bool">ブーリアン</span></td>
        <td><span class="notranslate">Whether the two instances can collide (true) or not (false)</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>リターンです。</h4>
  <p class="code"><span data-keyref="Type_ID_Physics_Joint">Physics Joint ID</span></p>
  <p> </p>
  <h4>例</h4>
  <p class="code">var mainFixture, o_id;<br />
    mainFixture = physics_fixture_create();<br />
    physics_fixture_set_circle_shape(mainFixture, sprite_get_width(sprite_index) / 2);<br />
    o_id = instance_create_layer(x+25, y, &quot;Instances&quot;, obj_Piston);<br />
    physics_fixture_bind(mainFixture, id);<br />
    physics_fixture_bind(mainFixture, o_id);<br />
    physics_joint_prismatic_create(id, o_id, x, y, 0, 10, 0, 0, 0, 5, 0, 1, 1);<br />
    physics_fixture_delete(mainFixture);</p>
  <p>上記のコードでは、新しいフィクスチャを作成して定義し、「obj_Piston」のインスタンスを作成して、作成したフィクスチャを2つの新しい<span class="notranslate">objects</span> にバインドしています。そして、アンカー位置が最初のインスタンスの同じx/y座標にあり、x/y位置のベクトルと軸x/y（この場合は0,10、つまり「下」）によって形成される軸を持つプリズムジョイントによって結合されます。この軸に沿った移動量に制限は設けられていませんが、関節の摩擦をシミュレートするために、速度0、最大力5のモーターを追加しています。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">背中<a href="Joints.htm">関節</a></div>
        <div style="float:right">次のページ <a href="physics_joint_pulley_create.htm"><span class="notranslate">physics_joint_pulley_create</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
physics_joint_prismatic_create
-->
  <!-- TAGS
physics_joint_prismatic_create
-->
</body>
</html>