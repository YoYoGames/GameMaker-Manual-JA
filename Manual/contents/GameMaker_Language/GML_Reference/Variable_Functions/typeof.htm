<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>タイプオブ</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function typeof" />
  <meta name="rh-index-keywords" content="typeof" />
  <meta name="search-keywords" content="typeof" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>タイプオブ</h1>
  <p>この関数は、与えられた変数のデータ型を<span class="notranslate">string</span> として返す。 可能な戻り値は以下の表の通りである。</p>
  <table>
    <tbody>
      <tr>
        <th>文字列</th>
        <th>商品説明</th>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">&quot;number&quot;</span></td>
        <td>この変数は実数（浮動小数点数）を保持する。これには <span class="inline">NaN</span> と <span class="inline">infinity</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">&quot;string&quot;</span></td>
        <td>この変数には、文字列</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">&quot;array&quot;</span></td>
        <td>この変数が参照する配列は</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">&quot;bool&quot;</span></td>
        <td>この変数にはブール値(<span class="inline">true</span> / <span class="inline">false</span>)が格納されます。</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">&quot;int32&quot;</span></td>
        <td>32ビット整数を保持する変数</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">&quot;int64&quot;</span></td>
        <td>この変数には64ビットの整数が格納される</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">&quot;ptr&quot;</span></td>
        <td>この変数にはポインタ</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">&quot;undefined&quot;</span></td>
        <td>変数が未定義である</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">&quot;null&quot;</span></td>
        <td>変数がNULL値を保持している（通常、このようなことはないはずです）</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">&quot;vec3&quot;</span></td>
        <td>この変数には3値のベクトルが格納されます</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">&quot;vec4&quot;</span></td>
        <td>この変数は4値のベクトルを保持する</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">&quot;method&quot;</span></td>
        <td>この変数は、関数への参照を保持します。</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">&quot;struct&quot;</span></td>
        <td>変数は<span class="notranslate">struct</span> の参照を保持します。</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">&quot;ref&quot;</span></td>
        <td>この変数はインスタンスリファレンスを保持する</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">&quot;unknown&quot;</span></td>
        <td>値が不明です。これは、メモリの上書きなど、最も基本的なレベルで何か問題が発生したことを意味し、<i>決して</i>見られるべきではありません。</td>
      </tr>
    </tbody>
  </table>
  <p>この関数が<strong>メソッドに対して</strong>正しい値を返さない場合があることに注意してください。次の二つの関数定義について考えてみましょう。</p>
  <p class="code">a = function()<br />
    {<br />
        // something<br />
    }<br />
    <br />
    function b()<br />
    {<br />
        // Something<br />
    }
  </p>
  <p>技術的には、関数をインスタンススコープ変数にバインドしているので、これらは両方ともメソッドとみなされます。しかし、関数 <span class="inline">b</span> に対して <span class="inline">typeof()</span> を呼び出すと、「メソッド<em>」ではなく </em>「数値」が返され、一方 <span class="inline">a</span> に対して呼び出すと、「メソッド」が返されます。これは、 <span class="inline">b</span> のように作成されたメソッドには<span class="notranslate">script</span> のインデックス (整数値) が割り当てられるためで、コンパイラは関数が<span class="notranslate">script</span> で定義されていなくても、この方法でスクリプト関数を認識するのです。</p>
  <p> </p>
  <h4>構文です。</h4>
  <p class="code">typeof(variable);</p>
  <table>
    <tbody>
      <tr>
        <th>論証</th>
        <th>タイプ</th>
        <th>商品説明</th>
      </tr>
      <tr>
        <td><span class="notranslate">variable</span></td>
        <td><span data-keyref="Type_Any"><a href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm#variable" target="_blank">任意の</a></span></td>
        <td><span class="notranslate">The variable to get the data type of.</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>リターンです。</h4>
  <p class="code"><span data-keyref="Type_String"><a href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">String</a></span> (see table above)</p>
  <p> </p>
  <h4><b>例</b></h4>
  <p class="code">var _str = typeof(global.ExtensionInput);<br />
    show_debug_message(&quot; <strong>global.ExtensionInput is a &quot; + _str);</strong></p>
  <p>上記のコードは、与えられたグローバル変数が保持するデータ型を取得し、<span class="notranslate">string</span> をローカル変数に返し、それを使ってコンソールにメッセージを出力しています。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">戻る<a href="Variable_Functions.htm">バリアブルファンクション</a></div>
        <div style="float:right">次のページ <a href="bool.htm"><span class="notranslate">bool</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
typeof
-->
  <!-- TAGS
typeof
-->
</body>
</html>