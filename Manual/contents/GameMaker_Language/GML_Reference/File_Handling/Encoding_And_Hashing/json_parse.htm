<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_parse</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_parse" />
  <meta name="rh-index-keywords" content="json_parse" />
  <meta name="search-keywords" content="json_parse" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_parse</h1>
  <p>この関数は、JSON<span class="notranslate">string</span> (以前に <a href="json_stringify.htm"><span class="notranslate">json_stringify</span></a><span class="notranslate">structs</span>ここで、配列は JSON 配列と等価であり、<span class="notranslate">struct</span> は JSON<span class="notranslate">object</span> と等価です。パースするために<span class="notranslate">string</span> を指定すると、この関数はトップレベルの配列または<span class="notranslate">struct</span> を返し、それをコードで使用することができます。JSONの中身がよくわからない場合は、さまざまな<a href="../../Variable_Functions/Variable_Functions.htm">変数関数</a>（たとえば <a href="../../Variable_Functions/typeof.htm"><span class="inline">typeof()</span></a>と <a href="../../Variable_Functions/variable_struct_get_names.htm"><span class="inline">variable_struct_get_names()</span></a>の場合、<span class="notranslate">struct</span> ）で、返された内容を確認することができます。無効な値(つまり<span class="notranslate">string</span> でない値)をパースしようとすると、例外エラーが発生することに注意してください。</p>
  <p>この機能を使用する場合、いくつかの注意点があります。</p>
  <ul class="colour">
    <li>提供されたJSON<span class="notranslate">string</span> が、いずれかのプロパティの値として <span class="inline">undefined</span> を含む場合、パースされる際に <span class="inline">pointer_null</span> に変換されます。</li>
    <li>この機能では、最大ネスト数128のJSONファイルのみ読み込むことができます。</li>
  </ul>
  <p> </p>
  <h4>構文です。</h4>
  <p class="code">json_parse(json)</p>
  <table>
    <tbody>
      <tr>
        <th>論証</th><th>タイプ</th>
        <th>商品説明</th>
     </tr>
      <tr>
        <td><span class="notranslate">json</span></td><td><span data-keyref="Type_String"></span></td>
        <td><span class="notranslate">The JSON string to parse</span></td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>リターンです。</h4>
  <p class="code"><span data-keyref="Type_Struct">Struct</span> or <span data-keyref="Type_Array">Array</span></p>
  <p> </p>
  <h4>例</h4>
  <p class="code">json = &quot;{\&quot;myObj\&quot;: { \&quot;apples\&quot;:10, \&quot;oranges\&quot;:12, \&quot;potatoes\&quot;:100000, \&quot;avocados\&quot;:0 }, \&quot;myArray\&quot;:[0, 1, 2, 2, 4, 0, 1, 5, 1]}&quot;;<br />
    <br />
    var data = json_parse(json);<br />
    show_debug_message(data);
  </p>
  <p>上記のコードは、有効なJSON<span class="notranslate">string</span> を含む新しい<span class="notranslate">object</span> を作成し、 <span class="inline">json_parse()</span> を呼び出して<span class="notranslate">string</span> を<span class="notranslate">GML</span> <span class="notranslate">struct</span> に変換しています。</p>
  <p class="note"><span class="note">注</span>：JSON<span class="notranslate">string</span> は、ダブルクォート（<span class="inline2">&quot;</span>）の前にバックスラッシュ<span class="inline2">（</span>&quot;）が含まれていることに注意してください。<br>
    <br>
   <span class="inline2">json = &quot;{<strong>\&quot; </strong></span>myObj<br>
    <br>
    これは、ダブルクォートをコードの一部として読み込んで<span class="notranslate">string</span> を早々に閉じてしまうのではなく、<span class="notranslate">string</span> の中で実際の文字として読み込まれるようにするためです。この方法では、バックスラッシュを使用してダブルクォートを「エスケープ」しています。<br>
    <br>
    ただし、外部ファイルからJSONを読み込む場合は、そのファイル内の文字をエスケープする必要はなく、エスケープするとパース時にエラーが発生する可能性があります。
  </p>
  <hr />
  <p>上記のJSON<span class="notranslate">string</span> をパースした後、その構造が分かっていれば、様々な<a href="../../Variable_Functions/Variable_Functions.htm">Variable Functionsを使って</a>、その内容を確認したり、読み出したりすることができます。</p>
  <p class="code">data = json_parse(json);<br />
    <br />
    // Check if the struct has myObj variable<br />
    if variable_struct_exists(data, &quot;myObj&quot;)<br />
    {<br />
        // Check if it&#39;s a struct<br />
        if is_struct(data.myObj)<br />
        {<br />
            // Print all struct members to the log<br />
            var _names = variable_struct_get_names(data.myObj);<br />
            var _str = &quot;&quot;;<br />
            for (var i = 0; i &lt; array_length(_names); i++;)<br />
            {<br />
                _str = _names[i] + &quot;: &quot; + string(variable_struct_get(data.myObj, _names[i]));<br />
                show_debug_message(_str);<br />
            }<br />
        }<br />
    }<br />
    <br />
    // Check if the struct has myArray variable<br />
    if variable_struct_exists(data, &quot;myArray&quot;)<br />
    {<br />
        // Check if it&#39;s an array<br />
        if is_array(data.myArray)<br />
        {<br />
            show_debug_message(data.myArray);<br />
        }<br />
    }
  </p>
  <p>上記のコードは、与えられたJSON<span class="notranslate">string</span> をパースし、以下のコンソール出力を生成します。</p>
  <p class="code">oranges: 12<br />
    potatoes: 100000<br />
    avocados: 0<br />
    apples: 10<br />
    [ 0,1,2,2,4,0,1,5,1 ]</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">戻る<a href="Encoding_And_Hashing.htm">ファイルエンコード</a></div>
        <div style="float:right">次のページ <a href="base64_encode.htm"><span class="notranslate">base64_encode</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
json_parse
-->
  <!-- TAGS
json_parse
-->
</body>
</html>