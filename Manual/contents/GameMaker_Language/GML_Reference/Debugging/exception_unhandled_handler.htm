<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>例外処理なしハンドラ</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for exception_unhandled_handler" />
  <meta name="rh-index-keywords" content="exception_unhandled_handler" />
  <meta name="search-keywords" content="exception_unhandled_handler" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>例外処理なしハンドラ</h1>
  <p>この<span class="notranslate">runtime</span> 関数は、<span class="notranslate">runtime</span> の例外が発生したときに<span data-keyref="GameMaker Name">GameMaker の</span>デフォルトのエラーメッセージを「引き継ぐ」ために使用することができる。例外が発生したときに呼び出されるメソッドや関数を指定し、その第一引数に<span class="notranslate">struct</span> (以下、 )を指定する。 <strong><span data-keyref="Type_Struct_Exception"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Reference/Debugging/exception_unhandled_handler.htm">例外構造</a></span></strong>には、例外に関する情報が含まれています。この<span class="notranslate">struct</span> は次のような形式です。</p>
  <table>
    <colgroup>
      <col />
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th colspan="3"><span data-keyref="Type_Struct_Exception"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Reference/Debugging/exception_unhandled_handler.htm">例外構造</a></span></th>
      </tr>
      <tr>
        <th>バリアブル</th>
        <th>タイプ</th>
        <th>商品説明</th>
      </tr>
      <tr>
        <td><span class="inline">message</span></td>
        <td><span data-keyref="Type_String"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">文字列</a></span></td>
        <td>例外のためのショートメッセージ</td>
      </tr>
      <tr>
        <td><span class="inline">longMessage</span></td>
        <td><span data-keyref="Type_String"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">文字列</a></span></td>
        <td>例外のための長いメッセージ</td>
      </tr>
      <tr>
        <td><span class="inline">script</span></td>
        <td><span data-keyref="Type_String"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">文字列</a></span></td>
        <td>例外が発生した場所を説明する<span class="notranslate">string</span> </td>
      </tr>
      <tr>
        <td><span class="inline">line</span></td>
        <td><span data-keyref="Type_Real"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">リアル</a></span></td>
        <td>例外が発生した行番号</td>
      </tr>
      <tr>
        <td><span class="inline">stacktrace</span></td>
        <td><span data-keyref="Type_Array"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Arrays.htm">配列</a></span>の <span data-keyref="Type_String"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">文字列</a></span>s</td>
        <td>例外が発生したときのフレームの<a href="debug_get_callstack.htm">コールスタック</a>である<span class="notranslate">strings</span> の配列。</td>
      </tr>
    </tbody>
  </table>
  <p>また、引数として <span class="inline">undefined</span> を与えると、カスタム例外ハンドラ（設定されている場合）を削除し、<span data-keyref="GameMaker Name">GameMaker</span> のデフォルトのエラーメッセージに戻すことができる。</p>
  <p>この関数は、以前に設定された例外ハンドラメソッドを返しますが、変更されていない場合、または以前に <span class="inline">undefined</span> を使ってリセットされている場合は、単に <span class="inline">undefined</span> を返します。</p>
  <p>この関数にメソッドを渡すと、ユーザーにエラーメッセージが表示されず、自分で例外を処理することができるようになります。ただし、例外処理関数が呼ばれた後もゲームは終了してしまうので、この関数を使用して例外を「解除」してゲームを続行することはできません。また、最終フレームよりも長い時間ゲームを実行し続ける関数（例：<span class="inline"><a href="../General_Game_Control/game_restart.htm">game_restart()</a></span> ）も呼び出すことはできません。なぜなら、ゲームはクラッシュ後に終了する必要があるからです。</p>
  <p>このメソッドを実行するためのコンテキストはイベント<i>内ではないので</i>、この時点では何も画面にレンダリングできないことに注意してください。一般に、この時点で最も安全なのは、例外のコンテキスト情報をファイルに保存して、たとえば、次のゲーム実行時に解析して処理できるようにすることでしょう。</p>
  <p>なお、提供されたメソッドで <span class="inline">return</span> 文を使用した場合、与えられた値は整数に変換され、ランナーからの終了コードとして使用されます。</p>
  <p> </p>
  <h4>構文です。</h4>
  <p class="code">exception_unhandled_handler(user_handler);</p>
  <table>
    <tbody>
      <tr>
        <th>論証</th>
        <th>タイプ</th>
        <th>商品説明</th>
      </tr>
      <tr>
        <td><span class="notranslate">user_handler</span></td>
        <td><span data-keyref="Type_Method"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Method_Variables.htm">方法</a></span></td>
        <td><span class="notranslate">The method (user-defined function) to use as the exception handler, or <span class="inline">undefined</span> をクリックすると、デフォルトにリセットされます。</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>リターンです。</h4>
  <p class="code"><span data-keyref="Type_Method"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Method_Variables.htm">Method</a></span> (or <span data-keyref="Type_Undefined"><a data-rhwidget="HyperlinkPopover" href="../../../../LINKGOESHERE">undefined</a></span>)</p>
  <p> </p>
  <h4>例</h4>
  <p class="code">exception_unhandled_handler(function(ex)<br />
    {<br />
        // Print some messages to the output log<br />
        show_debug_message( &quot;--------------------------------------------------------------&quot;);<br />
        show_debug_message( &quot;Unhandled exception &quot; + string(ex) );<br />
        show_debug_message( &quot;--------------------------------------------------------------&quot;);<br />
    <br />
        // Write the exception struct to a file<br />
        if file_exists(&quot;crash.txt&quot;) file_delete(&quot;crash.txt&quot;);<br />
        var _f = file_text_open_write(&quot;crash.txt&quot;);<br />
        file_text_write_string(_f, string(ex));<br />
        file_text_close(_f);<br />
    <br />
        // Show the error message (for debug purposes only)<br />
        show_message(ex.longMessage);<br />
    <br />
        return 0;<br />
    });
  </p>
  <p>上記のコードでは、例外ハンドラメソッドを作成し、それを使って例外データをファイルに保存します。また、デバッグ用に、新しいポップアップウィンドウに長いエラーメッセージを表示します。</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">戻る<a href="Debugging.htm">デバッギング</a></div>
        <div style="float:right">次のページ <a href="get_integer.htm"><span class="notranslate">get_integer</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
exception_unhandled_handler
-->
  <!-- TAGS
exception_unhandled_handler
-->
</body>
</html>