<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>ロールバック方式</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Details for Rollback Multiplayer" />
  <meta name="template" content="../../../assets/masterpages/Manual_Page.htt" />
  <meta name="condition-tags" content="Export:Beta" />
</head>
<body>
  <h1>ロールバック方式</h1>
  <p>チュートリアルの<a data-xref="{title}" href="Creating_Multiplayer.htm">Create a Multiplayer Gameの</a>後、Rollbackシステムの仕組みについていくつかの質問があるかもしれません。このページでは、それについて詳しく説明します。</p>
  <h2>ロールバックとは？</h2>
  <p>オンラインゲームでは、ラグが発生しがちです。遠隔地の相手とプレイする場合、相手の入力がこちらに届くまでにほんの1秒程度かかることがありますが、それだけでゲーム体験が台無しになることもあります。</p>
  <p>ロールバックは、遅延の影響を軽減するために予測を利用します。これまでの入力をもとに、相手の次の行動を予測し、その結果を瞬時に表示するのです。</p>
  <p>予測が的中すると、ラグがなくなり、ゲームのレスポンスもよくなります。</p>
  <p>しかし、時には予測が間違っていたことに気づくこともある。その場合は、最後に正しかった状態まで<em>ロールバック</em>し、そこからゲームを続行する。これが「<strong>ロールバック・マルチプレイ</strong>」と呼ばれる所以です。</p>
  <h3>決定論</h3>
  <p>Rollbackは決定論的です。他のプレイヤーと入力を共有するだけで、全てのプレイヤーが与えられた入力に対して同じロジックを実行し、全てのクライアントで同じ結果を出すことを期待します。</p>
  <p>マルチプレイとは異なるアプローチとして、クライアント間でゲームの状態を継続的に同期させ、常に同じことができるようにする「状態複製」という方法があります。</p>
  <p>ロールバックはそのようなことはしません。入力を送信するだけでなく、状態を監視して、間違った予測の場合にはロールバックできるようにします。</p>
  <p class="note"><em><strong>クライアントとは何ですか？</strong></em><br>
    <br>
    クライアント」とは、あなたのゲームのプレイヤーのことで、彼らのマシン上で動作しているゲームのコピーのことを指します。
  </p>
  <h2>どのように機能するのですか？</h2>
  <p>前述したように、Rollbackはプレイヤー間の<strong>入力のやりとりのみ</strong>です。</p>
  <p>ロールバックが扱うものは大きく分けて2つあります。</p>
  <ul class="colour">
    <li><strong>入力</strong>です。各プレイヤーの<a href="Rollback_Functions/rollback_define_input.htm">入力は</a>、他のプレイヤーに送信されます。Player 0が自分のクライアントで<strong>&quot;fire &quot;</strong>を押すと、Rollbackは他のクライアントにもPlayer 0が<strong>&quot;fire &quot;</strong>を押したことがわかるようにします。<br>
      <br>
     <strong>予測は入力に対してのみ実行されます。</strong>
    </li>
    <li><strong>状態</strong>です。これは、管理されたすべての<span class="notranslate">objects</span> とその変数を含みます。これらはプレイヤー間で同期されません。あるクライアントで変数を変更しても、他のクライアントで自動的に更新されることはありません。<br>
      <br>
     <strong>ステートは、ロールバックされる目的でのみ管理されます。</strong>
    </li>
  </ul>
  <h2>で...何が違うの？</h2>
  <p><strong>入力が</strong> <strong>状態を</strong>変える、これがロールバックマルチプレイの基本コンセプトです。</p>
  <p>以下はその一例です。</p>
  <ul class="colour">
    <li><strong>入力</strong>します。プレイヤー0が<strong>&quot;fire &quot;</strong>を押す。</li>
    <li><strong>状態</strong>です。プレイヤー0が発射ボタンを押したので、弾が発射されました。その弾はやがて岩にぶつかる。この結果、プレイヤー0が1点獲得。<br>
      <br>
      これが、入力に依存するゲームの本質です。
    </li>
  </ul>
  <p>&quot;<strong>入力</strong>&quot; はRollbackが全プレイヤー間で通信するものであり、状態ではない。</p>
  <p>しかし、どのゲームクライアントも受信した入力に対して同じロジックを実行するため（これは必須条件）、<strong>結果として同じ状態に</strong>なるのです。</p>
  <p><img class="center" height="521" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/multiplayer_input_sync_explained.png" width="1096" /></p>
  <h2>では、国家とは何でしょうか。</h2>
  <p>入力だけが同期しているのであれば、<strong>状態は</strong>何のためにあるのか？</p>
  <p>入力は状態に影響を与えるので、入力の予測を誤ると<strong>状態がおかしく</strong>なる。</p>
  <p>ロールバックは予測が間違っていたことを発見すると、現在の状態を正しい状態に置き換え、その時点から再び入力と予測を実行します。これには、管理しているすべての<span class="notranslate">objects</span> とその変数が含まれます。</p>
  <p>これは、Rollbackがクライアント間で<span class="notranslate">objects</span> と変数を同期していることを意味するものではありません。あるクライアントで<span class="inline2">variable_a</span>が<span class="inline2">&quot;Gurpreet&quot;</span>に設定されたからと言って、他のクライアントにも同じ値が表示されるとは限りません。</p>
  <p>プレイヤーからの入力、あるいはアラームやランダム関数などの管理されたシステムから得られた変数でなければ、同じ値を見ることはできない。</p>
  <h2 id="h2">マネージドオブジェクト</h2>
  <p>オブジェクトには&quot;<strong>Managed</strong>&quot;チェックボックスがあり、デフォルトで新しい<span class="notranslate">objects</span> に対して有効になっています。</p>
  <p><img>マネージドとしてマークされたオブジェクトは、ロールバックされ、その変数、作成、破棄のすべてを含む予測が実行される能力を持つ。</p>
  <p>プレイヤー、マネージャー/コントローラー<span class="notranslate">objects</span> 、アイテムピックアップ、プロジェクタイルなど、ゲームプレイの一部であるすべての<span class="notranslate">objects</span> は、マネージドとしてマークする必要があります。</p>
  <p>静的な世界<span class="notranslate">objects</span> 、ビジュアル、エフェクトなど、プレイヤー間で同期する必要がなく、ゲームプレイに何ら影響を与えない<span class="notranslate">objects</span> の場合は、これを無効にすることが可能です。</p>
  <p>なお、親のmanagedプロパティは、その子には自動的に適用されないので、子<span class="notranslate">object</span> 、それぞれmanagedチェックボックスを手動で設定する必要があります。</p>
  <h2 id="h">シンクテスト</h2>
  <p><span class="inline"><a href="Rollback_Functions/rollback_create_game.htm">rollback_create_game()</a></span> は Sync Test の引数を取り、デフォルトで有効になります（引数未指定の場合）。</p>
  <p>Sync Testは、オフラインでゲームをテストするために使用されます。同期の問題が発生した場合、出力ログにエラーが出力され、お客様にお知らせします。Sync Test は<span class="notranslate">Windows</span> 、macOS、Opera GX で使用可能です。</p>
  <p>Sync Testは、ゲームの全コードをフレーム内で2回実行するので、同期の問題をチェックすることができます。つまり、オフラインのテストではいくつかのイベントが2回発生しますが、ゲームがオンラインで実行されているときには発生しません。</p>
  <h3>ランダム入力とモック入力</h3>
  <p>同期テスト中、「リモート」プレイヤー インスタンスには、簡単なテストとして、<a href="Defining_Inputs.htm">定義された</a>入力に対してランダムな入力値が与えられます。これを無効にするには、 <span class="inline"><a href="Rollback_Functions/rollback_use_random_input.htm">rollback_use_random_input()</a></span> を使用します。</p>
  <p><video class="center" src="../../../assets/Images/Scripting_Reference/GML/Reference/Rollback/rollback_two_players_synctest.mp4" width="856" height="420" controls="" align="center"></video></p>
  <p class="video_subtitle">シンクテスト中に2人目のプレーヤーがランダムな入力をしてしまう。</p>
  <p>また、Sync Test時にリモートプレーヤーに一時的なモック入力を割り当てることができます。詳しくは、モック<a data-xref="{text}" href="Defining_Inputs.htm#h1">入力を</a>参照してください。</p>
  <h2>マルチプレイヤーを効果的に開発する</h2>
  <p><strong>同じ入力を</strong>受けたときに、すべてのゲームクライアントが<strong>同じロジックを</strong>実行するようにする必要があります。あるクライアントのためだけに特定のインスタンスを作成または移動した場合、他のクライアントには反映されません。</p>
  <p>この問題は、「<a data-xref="{title}" href="Creating_Multiplayer.htm">マルチプレイヤーゲームの</a>作成」で示したように、インスタンスが<a href="Rollback_Variables/player_local.htm">ローカルか</a>どうかに関係なく、すべてのプレイヤーロジックがすべてのプレイヤーインスタンスに対して同じように実行されるようにゲームをプログラムした場合は、通常発生しません。しかし、ある特定のプレイヤーに対してのみ何かを行い、他のプレイヤーには行わないという条件を実装した場合、ゲーム状態に乱れが生じます。</p>
  <h2 id="h1">プレイヤーオブジェクトの定義</h2>
  <h3>プレイヤーインスタンスの自動生成</h3>
  <p><a data-xref="{title}" href="Creating_Multiplayer.htm">Create a Multiplayer Game</a>にあるように、 <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span> /<a data-xref="{title}" href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Define_Player.htm">Define Player (Rollback)</a>でプレイヤー<span class="notranslate">object</span> を定義すると、接続中の各プレイヤーに対してシステムが自動的にそのインスタンスを作成します。また、接続を切断したプレイヤーのインスタンスは破棄されます。</p>
  <p>この方法で作成されたプレイヤーインスタンスには、 <span class="inline"><a data-xref="{title}" href="Rollback_Variables/player_id.htm">player_id</a></span> 変数で自動的にIDが割り当てられます。各プレイヤーインスタンス内で、引数なしで <a href="Rollback_Functions/rollback_get_input.htm"><span class="inline">rollback_get_input()</span></a>を引数なしで呼び出すだけで、その特定のプレーヤーの入力が得られます。</p>
  <p>これはロールバックシステムの標準的な使用方法ですが、プレイヤーインスタンスとその入力を手動で管理することも可能です。</p>
  <h3>プレイヤーインスタンスの手動作成</h3>
  <p>プレイヤーインスタンスを手動で管理するには、 <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span> を呼び出さないようにします。この場合、プレイヤー・インスタンスが作成されないままゲームが開始されます。</p>
  <p>次に、理想的には<a data-xref="{text}" href="Rollback_Events.htm#h">Rollback Start</a>イベントでプレイヤー インスタンスを手動で作成し、カスタム変数でプレイヤー ID を渡します。プレーヤーの入力を取得するには、次のように呼び出します。 <a href="Rollback_Functions/rollback_get_input.htm"><span class="inline">rollback_get_input()</span></a>を呼び出し、引数としてプレーヤーのIDを指定します。を呼び出します。 <a href="Rollback_Functions/rollback_get_info.htm"><span class="inline">rollback_get_info()</span></a>を呼び出して、<span class="notranslate">struct</span> の<a href="Rollback_Variables/Rollback_Variables.htm">変数を</a>取得します。この変数がなければ、自動的にプレイヤーに割り当てられます。</p>
  <p>こうすることで、プレーヤーのインスタンスをいつ、どのように作成するか、プレーヤーに割り当てるID、特定のプレーヤーの入力を取得することを手動で管理することができます。</p>
  <h3>プレイヤーインスタンスを維持する</h3>
  <p><span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_player()</a></span> /<a data-xref="{title}" href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Define_Player.htm">Define Player (Rollback)</a> を使用している場合、作成されたプレイヤー インスタンスは破棄しないでください。プレーヤーを敗北として表示する必要がある場合は、<span class="notranslate">sprite</span> を変更するか、他の方法で非表示にします。ただし、インスタンスは<span class="notranslate">GameMaker</span> で管理されているため、そのままにしておきます。</p>
  <h2>シングルプレイヤー</h2>
  <p>ロールバックシステムは、一人用のゲームを作るときに使うことができます。 <span class="inline"><a href="Rollback_Functions/rollback_create_game.htm">rollback_create_game()</a></span> を呼び出すときに、プレイヤーの数として<strong>1</strong>を指定するだけです。</p>
  <p>この方法では、システムが<span class="notranslate">servers</span> に接続することはなく、ゲームは基本的にオフラインで行われ、好きなときにオンラインマルチプレイヤーゲームに拡張することができます。</p>
  <p>この方法は、将来的にマルチプレイヤーを使用する可能性のある新しいプロジェクトを作るときに、ロールバックシステムを使用せずに、すでに完成したゲームにマルチプレイヤーを実装するのは難しいので、この方法を使用します。</p>
  <h2 id="h4">マニュアルとオートスタートの比較</h2>
  <p>デフォルトでは、マルチプレイヤーゲームは、すべてのプレーヤーが参加した時点で開始されます。しかし、その前に <a href="Rollback_Functions/rollback_start_game.htm"><span class="inline">rollback_start_game()</span></a>.</p>
  <p>を呼び出すことで、自動起動の動作を完全に無効にすることができます。 <a href="Rollback_Functions/rollback_use_manual_start.htm"><span class="inline">rollback_use_manual_start()</span></a>.この場合、ゲームは手動で起動するのを待つことになります。</p>
  <p>自動起動は、プレーヤー環境設定が<a href="Rollback_Functions/rollback_use_player_prefs.htm">有効な</a>場合、自動的に無効になります。</p>
  <p><span></span></p>
  <h2>参考文献</h2>
  <p>ロールバックシステムについて詳しくは、次のページをご覧ください。</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="Defining_Inputs.htm">入力の定義</a></li>
    <li><a data-xref="{title}" href="Rollback_Constraints.htm">ロールバックコンストレイント</a></li>
    <li><a data-xref="{title}" href="Rollback_Events.htm">ロールバックイベント</a></li>
    <li><a data-xref="{title}" href="Rollback_Preferences.htm">プレイヤー環境設定</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>戻る<a data-xref="{title}" href="Rollback_Multiplayer.htm">ロールバックマルチプレイ</a></div>
        <div>次へ<a data-xref="{title}" href="Defining_Inputs.htm">入力の定義</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
</body>
</html>