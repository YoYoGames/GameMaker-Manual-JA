<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>入力の定義</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="template" content="../../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="condition-tags" content="Export:Beta" />
</head>
<body>
  <h1>入力の定義</h1>
  <p>入力はロールバックシステムによって管理されるので、プレイヤー間で適切に同期させることができます。あるプレーヤーの入力は、 <span class="inline"><a href="Rollback_Functions/rollback_get_input.htm">rollback_get_input()</a></span> を使って取得できます。これは、そのプレーヤーの入力を含む<span class="notranslate">struct</span> を返します。</p>
  <h2>デフォルトの入力</h2>
  <p>デフォルトでは、入力構造体に以下のキーを取得します。</p>
  <p class="code"><strong>left</strong>, <strong>right</strong>, <strong>up</strong>, <strong>down</strong>, <strong>Z</strong>, <strong>X</strong>, <strong>C</strong>, <strong>space</strong></p>
  <p>方向入力は、矢印キーにマッピングされています。</p>
  <h2>入力バリアント</h2>
  <p>定義された各キーボード入力は <span class="inline"><a href="../Game_Input/Keyboard_Input/keyboard_check.htm">keyboard_check()</a></span> を使って読み込まれ、キーが保持されているかどうかを取得します。マウス入力については、 <span class="inline"><a href="../Game_Input/Mouse_Input/mouse_check_button.htm">mouse_check_button()</a></span> を使用する。</p>
  <p>定義された入力 (デフォルトまたはカスタム) それぞれについて、 <span class="inline"><a href="../Game_Input/Keyboard_Input/keyboard_check_pressed.htm">keyboard_check_pressed()</a></span> と <span class="inline"><a href="../Game_Input/Keyboard_Input/keyboard_check_released.htm">keyboard_check_released()</a></span> (およびマウス入力のための同等の関数) を使用するバリエーションも得られます。これらは、それぞれ &quot;<strong>_pressed</strong>&quot; と &quot;<strong>_released</strong>&quot; という接尾辞を付けて追加されます。</p>
  <p>例えば、 <span class="inline">space</span> の入力に対して、 <span class="inline">space_pressed</span> と <span class="inline">space_released</span> 、同様に取得します。</p>
  <h2 id="h">カスタムコントロール</h2>
  <h3>定義付け</h3>
  <p>独自の入力を定義するには、使用する入力キーと割り当てられた定数を含む<span class="notranslate">struct</span> を作成し、それを <span class="inline"><a href="Rollback_Functions/rollback_define_player.htm">rollback_define_input()</a></span> に渡してください。これにより、このページの冒頭で述べたデフォルトのコントロールがオーバーライドされます。</p>
  <p>左側で入力名を定義し（例：<span class="inline2">fire</span>）、右側で入力を割り当てます（例：<span class="inline2">mb_left</span>）。</p>
  <p class="code">// Before starting rollback game<br />
    rollback_define_input({<br />
        fire: mb_left,<br />
        interact: vk_space,<br />
        left: ord(&quot;A&quot;),<br />
        right: ord(&quot;D&quot;)<br />
    });</p>
  <p><span class="inline"><a href="Rollback_Functions/rollback_get_input.htm">rollback_get_input()</a></span> を呼び出すと、ここで定義された入力<span class="inline2">(fire</span>,<span class="inline2">interact</span>, など) と、それぞれの<span class="inline2">*_pressed</span>と<span class="inline2">*_released の</span>バリアントのみが返されます。</p>
  <p><span class="notranslate">GML</span> Visual の場合、<a data-xref="{title}" href="../../../Drag_And_Drop/Drag_And_Drop_Reference/Rollback/Define_Input.htm">Define Input (Rollback</a>) を使用します。</p>
  <h3>定数</h3>
  <p>構造体の入力値には、以下のいずれかの値を割り当てることができます。</p>
  <table>
    <colgroup>
      <col />
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th>入力タイプ</th>
        <th>価値</th>
        <th>商品説明</th>
      </tr>
      <tr>
        <td colspan="1" rowspan="2"><strong>キーボード</strong></td>
        <td><span class="inline">vk_*</span> 定数</td>
        <td>これらの定数を使用して、キーボードキーを定義します。このような定数の一覧は、<a href="../Game_Input/Keyboard_Input/Keyboard_Input.htm">ここに示されて</a>います。</td>
      </tr>
      <tr>
        <td><span class="inline">ord(&quot;&quot;)</span></td>
        <td>で囲んで文字キーを定義します。 <a href="../Strings/ord.htm"><span class="inline">ord()</span></a>.</td>
      </tr>
      <tr>
        <td><strong>ゲームパッド</strong></td>
        <td><span class="inline">gp_*</span> 定数</td>
        <td>これらの定数は、ゲームパッドの入力（ボタンや軸）を定義するために使用します。そのような定数のリストは<a href="../Game_Input/GamePad_Input/Gamepad_Input.htm">ここにあります</a>。</td>
      </tr>
      <tr>
        <td colspan="1" rowspan="7"><strong>マウス</strong></td>
        <td><span class="inline">mb_*</span> 定数</td>
        <td>これらの定数は、マウスボタンを定義するために使用します。そのような定数のリストは、<a href="../Game_Input/Mouse_Input/Mouse_Input.htm">ここに示されています</a>。<br>
          <br>
         <span class="note">注意</span>： <span class="inline">mb_any</span> と <span class="inline">mb_none</span> は使用できません。
        </td>
      </tr>
      <tr>
        <td><span class="inline">m_axisx</span></td>
        <td><span class="notranslate">room</span> におけるマウスの X 位置 (<span class="inline"><a href="../Game_Input/Mouse_Input/mouse_x.htm">mouse_x</a></span> を使用)。</td>
      </tr>
      <tr>
        <td><span class="inline">m_axisy</span></td>
        <td><span class="notranslate">room</span> におけるマウスの Y 位置（<span class="inline"><a href="../Game_Input/Device_Input/device_mouse_y.htm">mouse_y</a></span> を使用）。</td>
      </tr>
      <tr>
        <td><span class="inline">m_axisx_gui</span></td>
        <td>GUIレイヤー上のマウスのX位置(using <a href="../Game_Input/Device_Input/device_mouse_x_to_gui.htm"><span class="inline">device_mouse_x_to_gui()</span></a>).</td>
      </tr>
      <tr>
        <td><span class="inline">m_axisy_gui</span></td>
        <td>GUIレイヤー上のマウスのY位置(using <a href="../Game_Input/Device_Input/device_mouse_y_to_gui.htm"><span class="inline">device_mouse_y_to_gui()</span></a>).</td>
      </tr>
      <tr>
        <td><span class="inline">m_scroll_up</span></td>
        <td><span class="inline">1</span> マウスホイールで上方向にスクロールしている場合は それ以外の場合は <span class="inline">0</span> </td>
      </tr>
      <tr>
        <td><span class="inline">m_scroll_down</span></td>
        <td><span class="inline">1</span> マウスホイールで下方向にスクロールしている場合は それ以外の場合は <span class="inline">0</span> </td>
      </tr>
    </tbody>
  </table>
  <h3>マルチコントロール</h3>
  <p>入力定数を配列で並べることで、各入力に対して複数のコントロールを割り当てることができます。</p>
  <p class="code">rollback_define_input({<br />
        fire:     [mb_left, ord(&quot;X&quot;)],<br />
        interact: [vk_space, ord(&quot;C&quot;)],<br />
        left:     [ord(&quot;A&quot;), vk_left],<br />
        right:    [ord(&quot;D&quot;), vk_right]<br />
    });</p>
  <p>この例では、<span class="inline2">fireは</span> <span class="inline2">mb_leftと</span> <span class="inline2">X</span>キーの両方で、<span class="inline2">interactは</span> <span class="inline2">vk_spaceと</span> <span class="inline2">C</span>キーで、といった具合にトリガーされることになります。</p>
  <p class="code">var _input = rollback_get_input();<br />
    if (_input.fire)<br />
    {<br />
        // Runs when LMB or X is pressed<br />
    }</p>
  <p class="note">例えば、特定の入力値 (例えば<span class="inline2">mb_left</span>や<span class="inline2">ord(&quot;A&quot;)</span>) は、入力全体を通して<strong>一度しか</strong>使用できません。<span class="notranslate">struct</span>.</p>
  <h2 id="h1">モック入力</h2>
  <p>ローカルでテストする場合、オフラインでマルチプレイヤーゲームプレイをテストできるように、リモートプレーヤー用の一時的な入力を定義することができます。</p>
  <p>を使用して、プレーヤーのモック入力を定義することで実現できます。 <a href="Rollback_Functions/rollback_define_mock_input.htm"><span class="inline">rollback_define_mock_input()</span></a>.たとえば、上記のコード スニペットを呼び出してすべてのプレーヤーの <span class="inline">fire</span> 、 <span class="inline">interact</span> 、 <span class="inline">left</span> 、 <span class="inline">right</span> 入力を定義した後、2 番目のプレーヤーの入力セットを別途定義して、同期テスト中に使用することができます。</p>
  <p class="code">rollback_define_mock_input(1, {<br />
        fire: vk_control,<br />
        interact: vk_shift,<br />
        left: ord(&quot;J&quot;),<br />
        right: ord(&quot;L&quot;)<br />
    });</p>
  <p>これは、プレイヤー1（2人目のプレイヤー）のモック入力を定義し、同じ入力名を維持しながら、異なる入力を割り当てています。こうすることで、2人が同じコンピュータでローカルにゲームをプレイすることができます。</p>
  <h2>参考文献</h2>
  <p>ロールバックシステムについて詳しくは、次のページをご覧ください。</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="Rollback_Constraints.htm">ロールバックコンストレイント</a></li>
    <li><a data-xref="{title}" href="Rollback_Events.htm">ロールバックイベント</a></li>
    <li><a href="Creating_Multiplayer.htm">マルチプレイヤーゲームを作る</a></li>
    <li><a data-xref="{title}" href="Rollback_System.htm">ロールバック方式</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>戻る<a data-xref="{title}" href="Rollback_Multiplayer.htm">ロールバックマルチプレイ</a></div>
        <div>次へ<a data-xref="{title}" href="Rollback_Constraints.htm">ロールバックコンストレイント</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
</body>
</html>