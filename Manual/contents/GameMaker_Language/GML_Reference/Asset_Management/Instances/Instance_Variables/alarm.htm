<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>アラーム</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the variable alarm" />
  <meta name="rh-index-keywords" content="alarm" />
  <meta name="search-keywords" content="alarm" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>アラーム</h1>
  <p>この1次元<a href="../../../../GML_Overview/Arrays.htm">配列は</a>、そのインスタンスが持つアラームの現在値を取得したり、それらのアラームを設定するために使用されます。<span class="notranslate">object</span> の各インスタンスには 12 個のアラームが内蔵されており、各アラームにはそれぞれ独自の <a href="../../../../../The_Asset_Editors/Object_Properties/Object_Events.htm"><span class="notranslate">event</span></a>この変数が0になったときに実行されます。</p>
  <p>アラームは、各ステップの開始時、Begin Stepイベントの<strong>後</strong>、main Stepイベントの<strong>前</strong>、そしてフレームのレンダリングが行われる前にカウントダウンされます。つまり、Begin Step イベントでアラームを<span class="inline2">1</span>に設定すると、そのイベントは同じフレームで実行されますが（Begin Step が終了するとアラームは 0 にカウントダウンされるため）、Step イベントでアラームを<span class="inline2">1</span>に設定すると、そのイベントは次のフレームで実行されます。</p>
  <p>アラームは0になっても終了せず、次のステップで-1されるので、何らかの理由でアラームを止める必要がある場合は、配列の値を<i>0ではなく</i>-1に設定する必要があることに注意してください。アラーム時間は<i>ゲームステップで</i>計算され、値が30なら30ステップ、60なら60ステップ...となります。</p>
  <p class="note"><span class="note">注</span>）アクションやコードが何も入っていないアラームは実行されません。ただし、コメントだけでコードがない場合でも、アラームはカウントダウンされます。</p>
  <p>アラームの配列を直接設定することもできますが（現在のアラームの値も配列を使って直接取得する）、状況によってはこの方法が最も適切でない場合もあるので、アラームの設定には関数 <span class="inline"><a href="../alarm_set.htm">alarm_set()</a></span> を、アラームの設定には関数 <a href="../alarm_get.htm"><span class="inline">alarm_get()</span></a>を使用してアラームの値を取得します。</p>
  <p> </p>
  <h4>構文です。</h4>
  <p class="code">alarm[val];</p>
  <p> </p>
  <h4>リターンです。</h4>
  <p class="code"><span data-keyref="Type_Real"></span> (-1 if the alarm isn&#39;t running)</p>
  <p> </p>
  <h4>例</h4>
  <p class="code">if canshoot<br />
    {<br />
        if (keyboard_check_pressed(vk_space))<br />
        {<br />
            canshoot = false;<br />
            alarm[0] = room_speed;<br />
            instance_create_layer(x, y, &quot;Bullets&quot;, obj_Bullet);<br />
        }<br />
    }</p>
  <p>上記のコードは、ある変数をチェックし、それが真であれば、キーが押されたかどうかをチェックし、それが真であれば最後に変数を偽に設定し、アラームを設定し（ここで再び真に設定される）、インスタンスを生成しています。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back:<a href="Instance_Variables.htm">インスタンス変数</a></div>
        <div style="float:right">次のページ <a href="direction.htm"><span class="notranslate">direction</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
alarm
-->
  <!-- TAGS
alarm
-->
</body>
</html>