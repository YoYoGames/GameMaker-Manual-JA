<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>YUV動画</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../../assets/css/default.css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Information on drawing YUV videos" />
  <meta name="template" content="../../../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-index-keywords" content="yuv videos" />
  <meta name="search-keywords" content="yuv videos" />
  <meta name="condition-tags" content="" />
</head>
<body>
  <h1>YUV動画</h1>
  <p>ビデオにYUVカラーフォーマットを使用するプラットフォームでは、それらのビデオを描画するための余分な手順が必要です。これには、<span class="notranslate">shader</span> を使って、プリミティブなクワッドに2つのサーフェスを描画することが含まれます。</p>
  <p>YUV動画に対してこの関数が返すデータについては、 <span class="inline"><a href="video_draw.htm">video_draw()</a></span> のリファレンスページを最初に読み、そのデータを使って動画を描画する手順については、以下を続けて読んでください。</p>
  <h2>YUVシェーダ</h2>
  <p>プロジェクト内に<span class="notranslate">shader</span> <span class="notranslate">asset</span> を作成し、その Fragment<span class="notranslate">Shader</span> (<span class="inline2">.fsh</span>) のコードを次のように置き換えます。</p>
  <pre>//
// CUSTOM fragment<span class="notranslate">shader</span> YUVコンテンツ処理用
//
変化する vec2 v_vTexcoord;
変化する vec4 v_vColour;
uniform sampler2D v_chroma;
const float x = 1.164383;
const float y = 1.138393;
const float z = 1.138393;
const vec3 src_bias = vec3(16.0 / 255.0, 128.0 / 255.0, 128.0 / 255.0);
const mat3 src_xform = mat3(1.00000000 * x, 0.00000000 * y, 1.57480000 * z. * x, 0.00000000 * y, 1.57480000 * z. * z),
                            1.00000000 * x, -0.18732427 * y, -0.46812427 * z,
			    1.00000000 * x, 1.85560000 * y, 0.00000000 * z);
void main()
{
    float yy = texture2D(gm_BaseTexture, vec2(v_vTexcoord.x, v_vTexcoord.y)).r;
    vec2 cbcr = texture2D(v_chroma, vec2(v_vTexcoord.x, v_vTexcoord.y)).rg.とする。
    vec3 yuv = vec3(yy, cbcr);
    yuv -= src_bias;
    yuv *= src_xform;
    gl_FragColor = vec4(yuv, 1.0);
}
  
</pre>
  <h2>ゲットサンプラー</h2>
  <p><span class="notranslate">object</span> の Create イベントで、<span class="inline2">v_chroma</span> <span class="notranslate">shader</span> ユニフォームのサンプラー ID を取得します。これは、ビデオが YUV の場合のみです。</p>
  <pre>var _format = video_get_format();
if (_format == video_format_yuv)
{
    videochromasampler = shader_get_sampler_index(shader_YUV, &quot;v_chroma&quot;);

</pre>
  <h2 id="h">ドロー動画</h2>
  <p><span class="notranslate">object</span> の Draw イベントで、 <span class="inline"><a href="video_draw.htm">video_draw()</a></span> を呼び出し、その最初の配列位置が<strong>0</strong>（ビデオが再生中であることを意味する）であれば、ビデオを描画します。</p>
  <p>以下のコードでは、 <span class="inline"><a href="video_get_format.htm">video_get_format()</a></span> 関数で<span class="notranslate">switch</span> ステートメントを使用しています。ビデオが RGBA 形式を使用している場合は、単に配列の位置<span class="inline2">[1]</span>にサーフェイスを描画します。</p>
  <p>ビデオがYUV形式を使用している場合、<span class="notranslate">shader</span> 、2つの表面（位置<span class="inline2">[1]</span>と<span class="inline2">[2]</span>）をプリミティブな四角形に描画するために使用されます。</p>
  <pre>var _data = video_draw();
if(_data[0] == 0)
{
	switch(video_get_format())
	{
		case video_format_rgba:
			var _surf = _data[1];
			draw_surface(_surf,0,0);
		ブレーク
	
		// #### yuv の部分はここ #### です。
		case video_format_yuv:
			var _surf = _data[1];
			var _chromasurf = _data[2];
			if(surface_exists(_surf) and surface_exists(_chromasurf))
			{
				shader_set(shader_YUV);
			
				var _tex_id = surface_get_texture(_surf);
				var _chroma_tex_id = surface_get_texture(_chromasurf); var _chroma_tex_id = surface_get_texture(_chromasurf);
				texture_set_stage(videochromasampler, _chroma_tex_id);
				gpu_set_texfilter(false);
			
				draw_primitive_begin_texture(pr_trianglestrip, _tex_id);
			        draw_vertex_texture(0, 0, 0, 0);
				draw_vertex_texture(surface_get_width(_chromasurf), 0, 1, 0);
				draw_vertex_texture(0, surface_get_height(_chromasurf), 0, 1)を実行します。
				draw_vertex_texture(surface_get_width(_chromasurf), surface_get_height(_chromasurf), 1, 1)を実行します。
				draw_primitive_end();
			
				gpu_set_texfilter(true);
				shader_reset();
			
		ブレーク
	

  </pre>
  <p><span class="inline2">case video_format_yuv:</span>以下のコードでは、次のような処理を行っています。</p>
  <ul class="colour">
    <li>ビデオサーフェイス<span class="inline2">（_surf</span>）およびクロマサーフェイス<span class="inline2">（_chromasurf</span>）を取得します。</li>
    <li>を使用して、それらが存在することを確認します。 <span class="inline"><a href="../Surfaces/surface_exists.htm">surface_exist()</a></span>
      <ul>
        <li><span class="notranslate">shader</span> を<span class="inline2">shader_YUV</span>に設定します（これは新しく作成した YUV<span class="notranslate">shader</span> ）。</li>
        <li>両方のサーフェイスの<span class="notranslate">textures</span> を取得します。</li>
        <li>クロマサーフェスの<span class="notranslate">texture</span> を、Create イベントで取得したサンプラーに代入します。</li>
        <li><span class="notranslate">texture</span> フィルタリングを無効にする</li>
        <li>ビデオサーフェスの<span class="notranslate">texture</span> を割り当てた三角形のストリッププリミティブの描画を開始します。</li>
        <li>ビデオサーフェスをカバーする矩形を描画し、その矩形にクロマサーフェスの幅と高さを使用します。</li>
        <li>プリミティブを終了します。</li>
        <li><span class="notranslate">texture</span> フィルタリングを再有効化し、シェーダをリセットします。</li>
      </ul>
    </li>
  </ul>
  <p>ここでは、プリミティブでメイン映像面を描画し、その上にクロマ面を<span class="notranslate">shader</span> 。クロマ面の<span class="notranslate">texture</span> がサンプラー経由で<span class="notranslate">shader</span> に渡されたのはこのためです。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>戻る<a data-xref="{text}" href="Videos.htm#h1">動画再生</a></div>
        <div>次ページ：<a data-xref="{title}" href="video_set_volume.htm">video_set_volume</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
YUV	Videos
-->
  <!-- TAGS
-->
</body>
</html>