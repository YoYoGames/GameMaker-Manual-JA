<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>評価順序</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the Evaluation Order of arguments" />
  <meta name="rh-index-keywords" content="Evaluation Order" />
  <meta name="search-keywords" content="Evaluation Order" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>評価順序</h1>
  <p><span class="notranslate">GameMaker Language</span> を使ってゲームをプログラミングする場合、関数呼び出しの引数は<strong>評価順序が保証</strong>されていないことに注意する必要があります。つまり、コード内に配置された関数の実行順序はプラットフォームによって変わるので、明示的にコーディングする必要があります。これは、異なるターゲットプラットフォーム間の最適化の違いによるものです。例えば、<span class="notranslate">Windows</span> ターゲットでは関数の引数は右から左に評価されるかもしれませんが、HTML5 ターゲットでは、左から右に評価されるかもしれません。したがって、問題を回避するために、単一の関数呼び出しの引数で複数の関数を呼び出さないほうがよいでしょう。</p>
  <p>この意味を理解するために、次のコードを考えてみましょう。<a href="Script_Functions.htm">スクリプト関数</a>&quot;<span class="inline">buffer_get_info</span>&quot; は、いくつかの<a href="Runtime_Functions.htm">ランタイム関数を</a>呼び出し、それらを引数として使用しています。</p>
  <p class="code">buffer_seek(buff, buffer_seek_start, 0);<br />
    buffer_get_info(buffer_read(buff, buffer_s8), buffer_read(buff, buffer_s16),buffer_read(buff, buffer_s16));</p>
  <p>さて、ここで問題なのは、あるプラットフォームでは、<i>最後の</i> <span class="inline">buffer_read()</span> が<i>最初に</i>呼び出されるため、<span class="notranslate">script</span> のすべての引数が、<span class="notranslate">buffer</span> から「逆」順番にデータを読み込むことになり、間違ってしまうということです。このことは、 <span class="inline">buffer_read()</span> 関数に対するそれ以降のすべての値に影響を与えるので、この<span class="notranslate">script</span> 関数に渡されるすべての引数が間違っていることになります!</p>
  <p>これを回避するには、次のように<i>明示的に</i>必要な順序で関数を呼び出し、返された値を変数に格納する必要があります。</p>
  <p class="code">var val[0] = buffer_read(buff, buffer_s8);<br />
    var val[1] = buffer_read(buff, buffer_s16);<br />
    var val[2] = buffer_read(buff, buffer_s16);<br />
    buffer_get_info(val[0], val[1], val[2]);</p>
  <p>この方法は、より冗長に見えるかもしれませんが、すべてを明確にし、評価順序に関する起こりうる問題を回避することができます。</p>
  <p>また、コンパイルするターゲットによって評価される順番が変わるので、<span class="glossextra">式を</span>使うときにも注意が必要です。そのため、コード内で式を使用する場合は、 <span class="inline">()</span> を使用して、操作の順序を適切に制御することを確認してください。これは、すべてのターゲット プラットフォームのゲームで正しい動作を保証するために非常に重要であり、HTML5 プラットフォームでは<i>不可欠</i>です。<a href="Expressions_And_Operators.htm">式の</a>ページで詳しく説明しています。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">戻る<a href="GML_Overview.htm">GMLの概要</a></div>
        <div style="float:right">次へ<a data-xref="{title}" href="Accessors.htm">アクセサ</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
evaluation order
-->
  <!-- TAGS
evaluation_order
-->
</body>
</html>