<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>ながら</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the while function" />
  <meta name="rh-index-keywords" content="while" />
  <meta name="search-keywords" content="while" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>ながら</h1>
  <p><span class="notranslate">GameMaker Language</span> には<i>ループを</i>実行する方法がいくつかありますが、その中でも特に重要なのが <span class="inline">while</span> <span class="notranslate">loop</span> です。この<span class="notranslate">loop</span> 関数は次のような形をしています。</p>
  <p class="code">while (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p> <span class="inline">{}</span>ここでは、<a class="glossterm" data-glossterm="顔" href="#">式の</a>評価結果に基づいて何度も繰り返し実行される<a class="glossterm" data-glossterm="声明" href="#">文が</a>あります。つまり、 <span class="inline">while</span> <span class="notranslate">loop</span> で、式の評価値が <span class="inline">true</span> である限り、文（中括弧で囲んだ複数の文のコードブロックでもかまいません）が実行されるのです。以下に、「while」の典型的な使用例を示します。</p>
  <p class="code">while (place_meeting(x, y, obj_Wall))<br />
    {<br />
        x -= 1;<br />
    }</p>
  <p>上記のコードは、呼び出したインスタンスと「壁」インスタンスの衝突をチェックしています。衝突が発生している間は、インスタンスを1ピクセル左に移動させ、衝突がなくなるまで複数回の<a class="glossterm" data-glossterm="くりかえし" href="#">反復</a>処理を実行します。</p>
  <p><strong> <span class="inline">while</span> <span class="notranslate">loop</span></strong>は、1つまたは複数のステートメントを繰り返したいけれど、実際には何回繰り返さなければならないかわからない、または気にしないときに使用すべきです。最初の評価が <span class="inline">false</span> である場合、ステートメントは実行されないかもしれないことを心に留めておいてください。</p>
  <p><strong> <span class="inline">while</span> </strong> のループには十分な注意が必要です。簡単に<span class="notranslate">loops</span> を<i>無限に</i>作ることができます。その場合、ゲームはハングし、ユーザーの入力に反応しなくなり、強制終了する必要があります。例えば</p>
  <p class="code">while (!place_free(x, y))<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
    }</p>
  <p>さて、上記のコードは問題なく動作するかもしれませんが、インスタンスが移動するための空の位置を見つけることができない場合、無限<span class="notranslate">loop</span> を引き起こし、ゲームがハングアップする原因となります。このような可能性がある場合は、別のノンブロッキング<span class="notranslate">loop</span> を使用するか、式に追加の変数チェックを使用します（チェックには<a href="../Expressions_And_Operators.htm"><span class="inline">and</span> (&amp;<span class="inline">&amp;</span>)</a>、<a href="../Expressions_And_Operators.htm"><span class="inline">or</span> (<span class="inline">||</span>)</a>、<a href="../Expressions_And_Operators.htm"><span class="inline">xor</span> (<span class="inline">^^</span>)</a> <a class="glossterm" data-glossterm="オペレータ" href="#">演算</a>子と一緒に複数の式を使用することができます）。</p>
  <p class="code">var _check = 0;<br />
    while ((!place_free(x, y)) &amp;&amp; (_check &lt; 100))<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
        _check += 1;<br />
    }<br />
    if _check &gt;= 100<br />
    {<br />
        // code failed, so deal with it<br />
    }</p>
  <p>また、 <span class="inline"><a href="break.htm">break</a></span> ステートメントを使用して、<span class="notranslate">loop</span> から抜け出すこともできます。例えば、次のコードは、 <span class="inline">while</span> の評価が<em>常に</em> <span class="inline">true</span> になるにもかかわらず、100個の乱数を生成して続行します。</p>
  <p class="code">var i = 0;<br />
    while (true)<br />
    {<br />
        x[i] = random(room_width);<br />
        y[i] = random(room_height);<br />
        if ((i++) &gt;= 100)<br />
        {<br />
            break;<br />
        }<br />
    }</p>
  <p>を使用することもできます。 <a href="continue.htm"><span class="notranslate">continue</span></a>文は、 <span class="inline">while</span> <span class="notranslate">loop</span> 。 これを使うと、例えば、現在の<span class="notranslate">loop</span> の反復を終了し、新しい反復で再びループを再開します。</p>
  <p class="code">var file = file_text_open_read(&quot;Game_Data.txt&quot;);<br />
    var _num = 0;<br />
    while (!file_text_eof(file))<br />
    {<br />
        var _s = file_text_readln(file);<br />
    <br />
        if (_s == &quot;&quot;)<br />
        {<br />
            continue;<br />
        }<br />
    <br />
        str[num++] = _s;<br />
    }<br />
    <br />
    file_text_close(file);
  </p>
  <p>このコードでは、ファイルを開き、<span class="notranslate">loop</span> を繰り返すごとに、ファイルの内容の最後に達するまで、そのファイルから1行を読み取ります。読み込まれた行が空の場合<span class="notranslate">string</span> 、現在の<span class="notranslate">loop</span> の反復は <span class="inline">continue</span> ステートメントを使用して終了し、新しい反復が開始されます。そうでない場合は<span class="notranslate">string</span> が<a href="../Arrays.htm">配列に</a>追加され、配列の位置がインクリメントされます。</p>
  <p><span class="notranslate">loop</span> 関数の詳細な例については、以下のセクションを参照してください。 <a href="repeat.htm"><span class="inline">repeat</span></a>, <a href="do___until.htm"><span class="inline">do... until</span></a>と <a href="for.htm"><span class="inline">for</span></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">戻る<a href="../Language_Features.htm">言語機能</a></div>
        <div style="float:right">次のページ <a href="do___until.htm"><span class="notranslate">do / until</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
while
-->
  <!-- TAGS
while
-->
</body>
</html>