<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>をもって</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the with statement" />
  <meta name="rh-index-keywords" content="with" />
  <meta name="search-keywords" content="with" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>をもって</h1>
  <p><a href="../Addressing_Variables_In_Other_Instances.htm">他のインスタンスの変数を扱う</a>」で示したように、あるコードを現在実行しているインスタンス以外のインスタンスや<a href="../Structs.htm">構造</a>体の変数を読み込んで値を変更することは可能です。しかし、多くの場合、他のインスタンス内の単一の変数を変更するだけではなく、複数の関数やコード行を必要とする、より複雑なコード操作を実行したいと思うかもしれません。たとえば、ゲーム内のボール（<span class="notranslate">object</span> ）のインスタンスをすべて 8 ピクセル下に移動させたいとします。この場合、次のようなコードで簡単に実現できると思われるかもしれません。</p>
  <p class="code">obj_ball.y = obj_ball.y + 8;</p>
  <p>しかし、これは正しくありません。代入の右辺は最初のボールのy座標の値を取得し、それに8を足したものだからです。次にこの新しい値を<em>すべての </em>ボールのy座標として設定するので、結果的にすべてのボールが同じy座標を得ることになり、次のようにしても</p>
  <p class="code">obj_ball.y += 8;</p>
  <p>は、最初のステートメントを単に省略したものなので、まったく同じ効果をもたらします。では、どう<i>すれば</i>このようなことが実現できるのでしょうか。これが、 <span class="inline">with</span> という文が<span class="notranslate">GML</span> の中に存在する理由です。 <span class="inline">with</span> ステートメントは次のような構文になっています。</p>
  <p class="code">with (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p><a class="glossterm" data-glossterm="顔" href="#">式に対して</a> <span class="notranslate">struct</span> <a class="glossterm" data-glossterm="顔" href="#"></a>、インスタンスID、<span class="notranslate">object</span> ID（この<span class="notranslate">room</span> の<i>すべてのインスタンスが</i>コードブロックを実行することを示す）、<span class="notranslate">object</span> ID、または特殊<a href="../Instance_Keywords.htm">キーワード</a>（<span class="inline">all</span> または<span class="inline">other</span> ）のいずれかを使用して、コードを実行する1つまたは複数のインスタンス（または<span class="notranslate">struct</span> ）を指示することができます。これにより、中括弧 <span class="inline">{}</span> 内のコードの<strong>スコープが</strong>、実際にコードを保持しているインスタンス、<span class="notranslate">struct</span> または関数から、式で指定されたインスタンス（またはインスタンス、<span class="notranslate">struct</span> ）に変更されます。</p>
  <p>この式で <span class="inline">with</span> のスコープが設定されると、指定されたインスタンスが現在の ( <span class="inline">self</span>) インスタンスであるかのように、そのインスタンスのそれぞれに対して<a class="glossterm" data-glossterm="声明" href="#">文が</a>実行されます。つまり、最初の問題に戻って、ボール<span class="notranslate">object</span> のすべてのインスタンスを 8 ピクセル下に移動させるには、次のように入力します。</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        y += 8;<br />
    }</p>
  <p>基本的にこれは<span class="notranslate">loop</span> であり、<span class="notranslate">loop</span> の<a class="glossterm" data-glossterm="くりかえし" href="#">各反復は</a>、<span class="notranslate">object</span> <span class="inline">obj_ball</span> の1つのインスタンス上でコードが実行されます。</p>
  <p>複数のステートメントを実行したい場合は、他のコードブロックと同じように、中括弧で囲んでください。たとえば、すべてのボールをランダムに移動させ、その速度と方向もランダムにする場合、次のようにします。</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        x = random(room_width);<br />
        y = random(room_height);<br />
        speed = 1 + random(2);<br />
        direction = random(360);<br />
    }</p>
  <p>上記のように、ステートメント（複数可）内で、指示されたインスタンスまたは構造体が、コードブロックを実行するターゲット（<span class="inline">self</span> ）インスタンスになりました。これは、元のインスタンス（ <span class="inline">with</span> とコードブロック全体が含まれている）が、そのインスタンスになったことを意味します。 <a href="../Instance_Keywords.htm"><span class="inline">other</span></a>インスタンスです。ですから - たとえば - すべてのボールを実際にコードを含む現在のインスタンスの位置に移動させるには、次のように入力します。</p>
  <p class="code">with (obj_ball)<br />
    {<br />
        x = other.x;<br />
        y = other.y;<br />
    }</p>
  <p> <span class="inline">with</span> ステートメントは、非常に強力なツールであり、多くの場面で役立ちますので、その使い方を十分に理解することが重要です。そのため、どのように使用できるかを十分に理解することが重要です。以下に、いくつかの使用例を示します。</p>
  <p class="code">with (instance_create_layer(x, y, &quot;Instances&quot;, obj_Ball))<br />
    {<br />
        speed = other.speed;<br />
        direction = other.direction;<br />
    }</p>
  <p>上記のコードでは、 <span class="inline">obj_Ball</span> のインスタンスを作成し、コードブロック全体を実行するインスタンスの速度と方向を代入しています。</p>
  <p class="code">with (instance_nearest(x, y, obj_Ball))<br />
    {<br />
        instance_destroy();<br />
    }</p>
  <p>上記のコードは、このコードを実行しているインスタンスに最も近い <span class="inline">obj_Ball</span> のインスタンスを破壊します。</p>
  <p class="code">with(clone_struct)<br />
    {<br />
        xx = other.x;<br />
        yy = other.y;<br />
        spd = other.speed;<br />
        dir = other.direction;<br />
    }</p>
  <p>上記のコードでは、 <span class="inline">with</span> を使って<span class="notranslate">struct</span> をターゲットにし、与えられた<span class="notranslate">struct</span> のメンバ変数に、このコードを呼び出したインスタンスのインスタンス変数に格納されている値をセットしています。</p>
  <p class="code">var _inst = noone;<br />
    with (obj_ball)<br />
    {<br />
        if (str &gt; other.str)<br />
        {<br />
            _inst = id;<br />
        }<br />
    }<br />
    <br />
    if (_inst != noone)<br />
    {<br />
        target = _inst;<br />
    }</p>
  <p>上記のコードは、<a href="../Variables_And_Variable_Scope.htm">ローカル変</a>数を使用しているため、これまでのコードより若干複雑になっています。この変数は、インスタンスや<span class="notranslate">struct</span> ではなく、<em>イベントや</em> <em>スクリプト </em><em>関数に</em> <strong>ローカル </strong>なので、コードブロック内で参照されているすべてのインスタンスから使用したりアクセスしたりすることができます。したがって、上記のコードでは、ローカル変数に特別なキーワード<span class="inline">noone</span> を設定し、<span class="inline">with</span> 構造を使用して、<span class="inline">obj_Ball</span> のすべてのインスタンスが<span class="inline">str</span> 変数をコードブロックを実行しているインスタンスの変数と照合するようにしています。変数の値の方が大きい場合は、ローカル変数<span class="inline">inst</span> に一意の ID を格納します。つまり、コードの最後に、呼び出し元のインスタンス（または大きいものがない場合はキーワード<span class="inline">noone</span> ）より大きい値を持つインスタンスだけが、ローカル変数 <span class="inline">_inst</span> に格納されることになります。</p>
  <p>特筆すべきは、特殊な <span class="inline"><a href="break.htm">break</a></span> と <span class="inline"><a href="continue.htm">continue</a></span> ステートメントを <font face="Lucida Console"><span style="font-size: 16px;"><b>とともに</b></span></font>も呼び出すことができます。 <span class="inline">break</span> を使用すると、 <span class="inline">with</span> のコードブロックが直ちに終了し、 <span class="inline">with</span> が終了した後にイベントや関数にあるコードに移動します。</p>
  <p class="code">var count = 0;<br />
    with (obj_Enemy)<br />
    {<br />
        if (++count &gt; 10)<br />
        {<br />
            break;<br />
        }<br />
        hp = 100;<br />
    }</p>
  <p>上記のコードは、<span class="notranslate">loops</span> のインスタンスを<span class="notranslate">room</span> <span class="inline">obj_Enemy</span> の<span class="notranslate">object</span> に通し、最初に見つけた10個について変数 <span class="inline">hp</span> に 100 をセットします。10個以上のインスタンスが存在する場合、withコードは <span class="inline">break</span> を呼び出して終了します。</p>
  <p> <span class="inline">with</span> のループの中で <span class="inline">continue</span> を使用する例は以下の通りです。</p>
  <p class="code">with (obj_Enemy_Parent)<br />
    {<br />
        if (invulnerable == true)<br />
        {<br />
            continue;<br />
        }<br />
        hp -= 25;<br />
    }</p>
  <p>このコードは、親が <span class="inline">obj_Enemy_Parent</span> であるすべてのインスタンスを<span class="notranslate">loop</span> で通過し、各インスタンスでインスタンス変数 <span class="inline">invulnerable</span> が <span class="inline">true</span> であるかどうかをチェックします。もしそうなら、 <span class="inline">continue</span> キーワードは<span class="notranslate">loop</span> の現在の反復を終了し、次の利用可能なインスタンスに移動します。そうでなければ、 <span class="inline">hp</span> 変数から 25 を削除します。これは、その親を持つすべてのインスタンスがチェックされるまで繰り返されます。</p>
  <div data-conref="../../../assets/snippets/Instance_creation_order_warning.hts"> </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">戻る<a href="../Language_Features.htm">言語機能</a></div>
        <div style="float:right">次のページ <a href="return.htm"><span class="notranslate">return</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
with
-->
  <!-- TAGS
with
-->
</body>
</html>