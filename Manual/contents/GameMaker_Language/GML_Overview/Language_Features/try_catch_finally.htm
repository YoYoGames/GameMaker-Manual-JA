<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>try / catch / finally</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the try / catch / finally functions" />
  <meta name="rh-index-keywords" content="try,catch,finally" />
  <meta name="search-keywords" content="try,catch,finally" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>try / catch / finally</h1>
  <p> <span class="inline">try</span> 、 <span class="inline">catch</span> 、 <span class="inline">finally</span> ステートメントは、ゲーム内のエラーチェックに使用することができ、コードのブロックをテストして、<a href="../../../Additional_Information/Errors/Runner_Errors.htm">実行時例外が</a>発生した場合の動作を制御することができます。例外が発生すると、ゲームが終了し、標準のエラーメッセージが表示されますが、この場合、ログファイルの保存やゲームの終了など、次の処理を行う必要があります（何もしないと、ゲームが不安定になり、正しく動作しなくなる可能性があることに注意してください）。</p>
  <p>最も基本的な <span class="inline">try</span> の構文は次のとおりです。</p>
  <p class="code">try<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }</p>
  <p>しかし、コードが生成する可能性のある例外を実際に処理するものがない <span class="inline">try</span> は、あまり役に立ちませんので、通常、次の構文で <span class="inline">catch</span> 、とペアにします。</p>
  <p class="code">try<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }<br />
    catch(&lt;variable&gt;)<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }</p>
  <p> <span class="inline">catch</span> は、前の <span class="inline">try</span> の例外をキャッチしたときに、次のブロックで提供される追加コードを実行することを許可するものです。これが<span class="notranslate">runtime</span> の例外であれば、与えられた変数を使って、次の情報を含む<a href="../Structs.htm">構造</a>体にアクセスすることができます。</p>
  <p class="code">{<br />
    message : &quot;&quot;,               // a string that is a short message for this exception<br />
    longMessage : &quot;&quot;,           // a string that is a longer message for this exception<br />
    script : &quot;&quot;,                // a string that describes where the exception came from<br />
    stacktrace : [ &quot;&quot;, &quot;&quot; ],    // an array of strings that is the stack frame the exception was generated<br />
    }</p>
  <p>簡単な使用例を以下に示します。</p>
  <p class="code">var a = 0, b = 0, c = 0;<br />
    try<br />
    {<br />
        c = a div b;<br />
    }<br />
    catch( _exception)<br />
    {<br />
        show_debug_message(_exception.message);<br />
        show_debug_message(_exception.longMessage);<br />
        show_debug_message(_exception.script);<br />
        show_debug_message(_exception.stacktrace);<br />
    }</p>
  <p>例外が発生したかどうかに関係なく、あるコードを実行したい場合があります。そのような場合には、 <span class="inline">finally</span> ブロックを追加してください。 <span class="inline">finally</span> の構文は次のとおりです。</p>
  <p class="code">finally<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        etc...<br />
    }</p>
  <p>注目すべきは、これらを自由に組み合わせることができることです。</p>
  <ul class="colour">
    <li><span class="inline">try</span> / <span class="inline">finally</span></li>
    <li><span class="inline">try</span> / <span class="inline">catch</span></li>
    <li><span class="inline">try</span> / / <span class="inline">catch</span> <span class="inline">finally</span></li>
  </ul>
  <p>なお、 <span class="inline">finally</span> ブロック<em>内では </em><a href="break.htm"><span class="inline">break</span></a>, <a href="continue.htm"><span class="inline">continue</span></a>, <a href="exit.htm"><span class="inline">exit</span></a>または <a href="return.htm"><span class="inline">return</span></a>文はこの文脈では意味を持たず、使用するとコンパイラがエラーを発生させるからです。</p>
  <p>最後に、例えば、様々な <span class="inline">try</span> / <span class="inline">catch</span> / <span class="inline">finally</span> を互いに入れ子にすることもできます。</p>
  <p class="code">var a = 0, b = 0, c = 0;<br />
    try<br />
    {<br />
        try<br />
        {<br />
            c = a div b;<br />
        }<br />
        finally<br />
        {<br />
            ++a;<br />
        }<br />
    }<br />
    catch(_exception)<br />
    {<br />
        ++a;<br />
        show_debug_message(_exception.message);<br />
        show_debug_message(_exception.longMessage);<br />
        show_debug_message(_exception.script);<br />
        show_debug_message(_exception.stacktrace);<br />
    }<br />
    finally<br />
    {<br />
        show_debug_message(&quot;a = &quot; + string(a));<br />
    }</p>
  <p>注目すべきは、デフォルトの<span class="notranslate">GML</span> エラーメッセージを引き継いで、独自のハンドラコードを使用するには、関数 <a href="../../GML_Reference/Debugging/exception_unhandled_handler.htm"><span class="inline">exception_unhandled_handler()</span></a>.この<a href="../Runtime_Functions.htm">ランタイム関数では</a>、カスタムメイドの <a href="../Method_Variables.htm"><span class="notranslate">method</span></a>を使用すると、ゲーム内で処理されない例外が発生したときに呼び出されます。</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">戻る<a href="../Language_Features.htm">言語機能</a></div>
        <div style="float:right">次のページ <a href="throw.htm"><span class="notranslate">throw</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
try
catch
finally
-->
  <!-- TAGS
try
catch
finally
-->
</body>
</html>