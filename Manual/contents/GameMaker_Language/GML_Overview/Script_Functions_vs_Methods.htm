<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>スクリプト関数とメソッドの比較</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="template" content="../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page explaining practical differences between Script Functions and Methods." />
  <meta name="rh-index-keywords" content="Script Functions vs. Methods" />
  <meta name="search-keywords" content="calling methods, calling script functions, method performance" />
</head>
<body>
  <h1>スクリプト関数とメソッドの比較</h1>
  <p>このページでは、<span class="notranslate">script</span> の関数とメソッドの使い分けについて、重要な情報をお伝えします。</p>
  <h2>基本的な違い</h2>
  <p>この構文で<a href="Script_Functions.htm">スクリプト関数が</a>作成されます。</p>
  <p class="code">function name()<br />
    {<br />
        code;<br />
    }</p>
  <p>この構文で<a href="Method_Variables.htm">メソッド変数が</a>作成されます。</p>
  <p class="code">name = function()<br />
    {<br />
        code;<br />
    }</p>
  <p><span class="notranslate">scripts</span> の最初の構文は、ゲーム内のどのスコープからでも呼び出せるグローバル関数を作成するために使用する必要があります。</p>
  <p><a href="Structs.htm">構造体/コンストラクターや</a> <span class="notranslate">objects</span> で関数を作成する場合は、2番目の構文を使用する必要があります。この構文は、メソッドを含む変数を作成します。</p>
  <h2>ダイレクトコール</h2>
  <p><span class="notranslate">script</span> 関数もメソッドも、<a href="Runtime_Functions.htm">ランタイム関数と</a>同じように括弧<span class="inline2">()</span>を使って直接呼び出すことができます。</p>
  <p class="code">// Create the function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Call the function<br />
    reset_x();
  </p>
  <p>また、関数 <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a>を使用して<span class="notranslate">script</span> 関数を実行することもできます。ただし、これは現在ではレガシー関数となっており、使用は推奨されていません。</p>
  <h2>インダイレクトコール方法</h2>
  <p>あるメソッドへの参照を別の変数に格納し、後でその別の変数を通して呼び出すことができます。</p>
  <p class="code">// Create method<br />
    reset_alpha = function()<br />
    {<br />
        image_alpha = 1;<br />
    }<br />
    <br />
    // Pass reference and call<br />
    temp_1 = reset_alpha;<br />
    temp_1();
  </p>
  <p class="note"><span class="note">注意</span>このコードでは、<span class="inline2">reset_alphaの</span>後に<span class="inline2">()</span>を付けていないことに注意してください。これはメソッドのリファレンスを読み込んでいるのであって、呼び出しているわけではないからです。</p>
  <p>この例では、<span class="inline2">temp_1</span>を呼び出すと、その<strong>メソッドへの</strong>参照を保存しているため、<span class="inline2">reset_alpha</span> が呼び出されます。</p>
  <p>この方法でメソッドの参照を渡すのは全く問題ありません。しかし、<span class="notranslate">script</span> 関数を使用する場合は、注意点があります。</p>
  <h2>インダイレクトコール <span class="notranslate">Script</span> 機能紹介</h2>
  <p>また、<span class="notranslate">script</span> 関数への参照を、別の変数に格納することができます。</p>
  <p class="code">// Create function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Store reference<br />
    temp_1 = reset_x;
  </p>
  <p>さて、このようにすると、<span class="inline2">temp_1を</span>呼び出すことができます。</p>
  <p class="code">temp_1();</p>
  <p>しかし、この変数は<strong>スクリプトの関数を</strong>参照しているため、まず<strong>メソッドに</strong>変換して呼び出す必要がある。</p>
  <p>特に毎フレームこのメソッドを呼び出す場合、エンジンはこの呼び出しのために毎フレーム新しいメソッドを作成しなければならないため、メモリ使用量の増加につながりやすくなっています。 </p>
  <p>では、その解決策とは？</p>
  <ul class="colour">
    <li>を使用します。 <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a>を使用して、その参照を通じて<span class="notranslate">script</span> 関数を呼び出します。これは、メソッドを作成しません。</li>
    <li>あるいは、より良い解決策は、<span class="notranslate">script</span> 関数の参照を渡すときに<a href="../GML_Reference/Variable_Functions/method.htm">メソッドに</a>変換することです。</li>
  </ul>
  <p>2番目の解決策を実行するには、次のようなコードを作成します。</p>
  <p class="code">temp_1 = method(undefined, reset_x);</p>
  <p>これは、<span class="inline2">reset_x</span>スクリプト関数から新しいメソッドを作成するもので、次のように使用します。 <a href="../GML_Reference/Variable_Functions/method.htm"><span class="inline">method()</span></a>.</p>
  <p>今、括弧を使って<span class="inline2">temp_1() を</span>呼び出しても、すでにメソッドが作成されているので、メモリ使用量は増えません。</p>
  <p>繰り返しますが、これは変数に格納された参照を通じて<strong>間接的に</strong> <span class="notranslate">script</span> 関数を呼び出す場合にのみ適用されます。直接呼び出すと、このような問題は発生しません。</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>戻る<a data-xref="{title}" href="GML_Overview.htm">GMLコードの概要</a></div>
        <div>次へ<a data-xref="{title}" href="Functions/Static_Variables.htm">静的変数</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions vs. Methods
-->
  <!-- TAGS
script_functions_vs_methods
-->
</body>
</html>