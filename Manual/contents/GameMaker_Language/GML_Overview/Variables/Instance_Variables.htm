<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>インスタンス変数</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining instance variables" />
  <meta name="rh-index-keywords" content="Instance Variables" />
  <meta name="search-keywords" content="instance variables" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>インスタンス変数</h1>
  <p><strong>インスタンス </strong>変数は、<span class="notranslate">object</span> のインスタンス内で作成され、そのインスタンスに固有とみなされます。つまり、同じ<span class="notranslate">object</span> の多くのインスタンスが同じ変数を持つことができますが、変数はそれぞれ<em>固有 </em>なので異なる値を保持することができます。
    のインスタンスです。しかし、インスタンス変数は<i>どのように</i>作られるのでしょうか？さて、新しい変数を作成するには、この小さな例に示すように、単純に値を代入します（これを変数の<em>宣言と</em>呼びます）。</p>
  <p class="code">potions = 12;<br/> life = 100;<br/> name = &quot;Jock MacSweeney&quot;;<br/> strength = 5.5;<br/> armour = -2;</p>
  <p>このように、名前と値（値は任意の<a href="../Data_Types.htm">データ型</a>）を与えるだけで、その変数を設定し、コーディングしている<span class="notranslate">object</span> のインスタンス内で使用できるようになります（なお、値は以下のように設定できます）。
    関数の戻り値や、他の変数との演算結果などです。）これらの変数は、インスタンス内で様々な方法で使用・変更できます。例えば、このコードは衝突イベント
    で、変数 &quot;<span class="inline">life</span>&quot; から値を取るために使用されます。</p>
  <p class="code">life -= 5 + armour;</p>
  <p>もし「<span class="inline">life</span> 」が100であれば、今度は97の値を持つことになります（100 - (5 + -2) = 97）。さて、これは簡単な例で、&quot;<span class="inline">armour</span>&quot; を実際の値である -2 に置き換えることが<i>できます</i>。
    しかし、その値が複数の場所で<a class="glossterm" data-glossterm="ハードコード化" href="#">ハードコーディングされて</a>おり、それを変更しようと思ったらどうなるでしょうか？その場合、すべてのコードを見て、すべての -2 を新しい値に変更する必要があります。
    これは時間がかかるし、エラーが発生しやすい。しかし、変数を使えば、その変数に新しい値を代入するだけで、それ以降は自動的にその新しい値が使われるようになり、より柔軟で、より簡単に修正できるようになります。
    ということです。また、値が変化しない場合でも、数値だけを見ているより、&quot;<span class="inline">life</span>&quot;という変数が何を意味するのかを覚えている方がはるかに簡単であることも留意すべき点です。</p>
  <p><span data-keyref="GameMaker Name">GameMakerには</span>「ビルトイン」のインスタンス変数もあるので、自分のインスタンス変数に同じ名前をつけたり、グローバル変数に同じ名前をつけて、「なんでこんな名前なんだろう？
    というエラーが発生します。しかし、これらはコードエディター上で別の色で表示され、オートコンプリートでも表示され、<a href="../../../The_Asset_Editors/Scripts.htm">コードエディターの</a>下部にバーで表示されるので、簡単に発見することができます。</p>
  <p>インスタンス変数を扱う際に役立つように設計された<a href="../Runtime_Functions.htm">実行時関数は</a>かなり多く、それらはすべて次のセクションにリストアップされています。</p>
  <ul class="colour">
    <li><a href="../../GML_Reference/Variable_Functions/Variable_Functions.htm">変数関数</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">戻る<a href="../Variables_And_Variable_Scope.htm">変数と変数のスコープ</a></div>
        <div style="float:right">次へ<a href="Global_Variables.htm">グローバル変数</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2021 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
instance variables
-->
  <!-- TAGS
instance_variables
-->

</body></html>