<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>静的変数</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Static Variables" />
  <meta name="rh-index-keywords" content="Static Variables" />
  <meta name="search-keywords" content="Static Variables,static" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>静的変数</h1>
  <p><a href="../Script_Functions.htm">スクリプト関数や</a> <a href="../Method_Variables.htm">メソッド変数の</a>面白いところは、<strong>スタティック変数を</strong>持つことができることです。静的変数とは、関数が最初に呼び出されたときに定義され、それ以降その値を維持する変数のことです。静的変数を作成するには、この簡単な例に示すように、 <span class="inline">static</span> キーワードを使って定義する必要があります。</p>
  <p class="code">counter = function()<br />
    {<br />
        static num = 0;<br />
        return num++;<br />
    }</p>
  <p>上記の例では、変数 <span class="inline">num</span> は静的変数なので、最初に関数を呼び出したときは <span class="inline">0</span> として定義されますが、その後、関数を呼び出すたびに、変数の初期化は無視されます。そこで、次にこの関数を次のように呼び出すと、このようになります。</p>
  <p class="code">for (var i = 0; i &lt; 10; ++i;)<br />
    {<br />
        show_debug_message(counter());<br />
    }</p>
  <p>と出力されます。</p>
  <p class="code">0<br />
    1<br />
    2<br />
    3<br />
    4<br />
    5<br />
    6<br />
    7<br />
    8<br />
    9</p>
  <p>ここで <span class="inline">static</span> キーワードを使わなかった場合、<span class="notranslate">loop</span> の繰り返しごとに <span class="inline">0</span> が出力されるだけです。変数 <span class="inline">num</span> は、関数が呼ばれるたびに <span class="inline">0</span> として定義され、返されることになるからです。静的変数は元の関数内でのみ変更可能であり、それを返すと単にその値のコピーになることに注意してください - 基本的に、共有された静的変数はそれを含む関数によってのみ変更可能です。</p>
  <p>静的変数は常に関数の先頭で初期化されるため、関数内のどこで定義しても、関数全体で常に読み出しや変更が可能です（定義される前に使用された場合も同様です）。次の例を見てください。</p>
  <p class="code">function add_health()<br />
    {<br />
        my_health++;<br />
        show_debug_message(my_health);<br />
        static my_health = 1;<br />
    }</p>
  <p>ここでは、スタティック変数 &quot;<span class="inline">my_health</span>&quot; が初期化される<em>前に</em>変更され、コンパイラの出力に出力されています。これは間違っているように見えますが、スタティック変数は関数コードが実行される<em>前に </em>初期化されるので、全く問題ありません。関数内に複数のスタティック変数がある場合、一番最初に初期化されたときに定義された順番が維持されることに注意してください。</p>
  <p>また、関数内で <span class="inline">static</span> キーワードを使用すると、<strong>静的関数を</strong>作成することができます。これは - 変数と同様 - 単に、関数が一度だけ定義されることを意味し、例えばその関数が最初に呼び出されたときとなります。</p>
  <p class="code">function(_x, _y) Vector2 constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function( _other )<br />
        {<br />
            x += _other.x;<br />
            y += _other.y;<br />
        }<br />
    }
  </p>
  <p>上記の例では，コンストラクタ関数<span class="inline"><span class="inline">Vector2</span> を使って<span class="notranslate">struct</span> を作成することができ，<span class="notranslate">struct</span> はいくつかの変数を持ち，そのうちのひとつがメソッド変数 <span class="inline"><span class="inline">Add</span> になります．この変数は static と定義されているので、この変数が含む関数は <span class="inline">Vector2</span> 関数が最初に呼ばれたときに<em>一度だけ </em>初期化されます。さらに、このコンストラクタで作成されたすべての<span class="notranslate">structs</span> は、<span class="notranslate">struct</span> ごとに新しい関数を作るのではなく、最初に作られた関数 <span class="inline">Add</span> を参照します (<span class="notranslate">structs</span> と <span class="inline">constructor</span> キーワードに関する詳細情報は、<a href="../Structs.htm">ここを</a>参照してください)。</p>
  <p>コンストラクタで継承を使用する場合、子コンストラクタの静的変数は親コンストラクタが実行された後に初期化されるため、子コンストラクタの静的変数が親の静的変数をオーバーライドすることはありません。次の例を見てください。</p>
  <p class="code">function Parent() constructor<br />
    {<br />
        show_debug_message(value);<br />
        static value = 10;<br />
    }<br />
    <br />
    function Child() : Parent() constructor<br />
    {<br />
        show_debug_message(value);<br />
        static value = 20;<br />
    }<br />
    <br />
    var _child = new Child();
  </p>
  <p> <span class="inline">Child()</span> コンストラクタを呼び出すと、これを出力ログに出力します。</p>
  <p class="code">10<br />
    20</p>
  <p>最初の値は親コンストラクタのもので、2番目は子コンストラクタのものです。このことから、親コンストラクタが終了するまで子のスタティック変数 <span class="inline">value</span> は初期化されず、各コンストラクタでは <span class="inline">show_debug_message()</span> の呼び出しの前にスタティック変数が初期化されたことがわかります。</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">戻る<a href="../GML_Overview.htm">GMLの概要</a></div>
        <div style="float:right">次へ<a data-xref="{title}" href="../Arrays.htm">配列</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright<span class="notranslate">YoYo Games Ltd.</span> 2022 All Rights Reserved</span></h5>
  </div>
  <!-- KEYWORDS
Static Variables
static
-->
  <!-- TAGS
static
-->
</body>
</html>